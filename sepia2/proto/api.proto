syntax = "proto3";

package sepia2.rpc;

// Request messages for functions requiring multiple parameters
message PrimaGatingInfo {
    int32 min_on_time = 1;
    int32 max_on_time = 2;
    int32 min_off_time_factor = 3;
    int32 max_off_time_factor = 4;
}
message TriggerLevelInfo {
    int32 trg_min_lvl = 1;
    int32 trg_max_lvl = 2;
    int32 trg_lvl_res = 3;
}
message TriggerInfo {
    int32 trg_src_idx = 1;
    String trg_src = 2;
    bool frequency_enabled = 3;
    bool trig_level_enabled = 4;
}
message PrimaModeInfo {
    int32 oper_mode_idx = 1;
    String oper_mode = 2;
}
message PrimaDevInfo {
    String device_id = 1;
    String device_type = 2;
    String fw_version = 3;
    int32 wl_count = 4;
}
message FwrRequestSupport {
    String preamble = 1;
    String calling_sw = 2;
    int32 options = 3;
    int32 buffer = 4;
}
message UptimeInfo {
    u32 main_pwr_up = 1;
    u32 active_pwr_up = 2;
    u32 scaled_pwr_up = 3;
}
message ModuleInfo {
    int32 slot_id = 1;
    bool is_primary = 2;
    bool is_back_plane = 3;
    bool has_UTC = 4;
}
message FwError {
    int32 err_code = 1;
    int32 phase = 2;
    int32 location = 3;
    int32 slot = 4;
    String condition = 5;
}
message USBDevice {
    String ProductModel = 1;
    String SerialNumber = 2;
}

message Sepia2Error {
  int32 code = 1;
}

// Common return types
message Empty {}

message StringResult {
  string value = 1;
}

message BoolResult {
  bool value = 1;
}

message Int32Result {
  int32 value = 1;
}

service Sepia2Service {
  rpc LIB_DecodeError(err_code: i32) returns String
  rpc LIB_GetVersion() returns String
  rpc LIB_GetLibUSBVersion() returns String
  rpc LIB_IsRunningOnWine() returns bool
  rpc USB_OpenDevice(dev_idx: i32) returns USBDevice
  rpc USB_OpenGetSerNumAndClose(dev_idx: i32) returns USBDevice
  rpc USB_GetStrDescriptor(dev_idx: i32) returns String
  rpc USB_GetStrDescrByIdx(dev_idx: i32, descr_idx: i32) returns String
  rpc USB_IsOpenDevice(dev_idx: i32) returns bool
  rpc USB_CloseDevice(dev_idx: i32) -> Result<()>
  rpc FWR_DecodeErrPhaseName(err_phase: i32) returns String
  rpc FWR_GetVersion(dev_idx: i32) returns String
  rpc FWR_GetLastError(dev_idx: i32) returns FwError
  rpc FWR_GetWorkingMode(dev_idx: i32) returns i32
  rpc FWR_SetWorkingMode(dev_idx: i32, mode: i32) -> Result<()>
  rpc FWR_RollBackToPermanentValues(dev_idx: i32) -> Result<()>
  rpc FWR_StoreAsPermanentValues(dev_idx: i32) -> Result<()>
  rpc FWR_GetModuleMap(dev_idx: i32, perform_restart: bool) returns i32
  rpc FWR_GetModuleInfoByMapIdx(dev_idx: i32, map_idx: i32) returns ModuleInfo
  rpc FWR_GetUptimeInfoByMapIdx(dev_idx: i32, map_idx: i32) returns UptimeInfo
  rpc FWR_CreateSupportRequestText(dev_idx: i32, fwr_req: FwrRequestSupport) returns String
  rpc FWR_FreeModuleMap(dev_idx: i32) -> Result<()>
  rpc PRI_GetDeviceInfo(dev_idx: i32, slot_id: i32) returns PrimaDevInfo
  rpc PRI_DecodeOperationMode( dev_idx: i32, slot_id: i32, oper_mode_idx: i32) returns PrimaModeInfo
  rpc PRI_GetOperationMode(dev_idx: i32, slot_id: i32) returns i32
  rpc PRI_SetOperationMode(dev_idx: i32, slot_id: i32, oper_mode_idx: i32) -> Result<()>
  rpc PRI_DecodeTriggerSource( dev_idx: i32, slot_id: i32, trg_src_idx: i32) returns TriggerInfo
  rpc PRI_GetTriggerSource(dev_idx: i32, slot_id: i32) returns i32
  rpc PRI_SetTriggerSource(dev_idx: i32, slot_id: i32, trg_src_idx: i32) -> Result<()>
  rpc PRI_GetTriggerLevelLimits(dev_idx: i32, slot_id: i32) returns TriggerLevelInfo
  rpc PRI_GetTriggerLevel(dev_idx: i32, slot_id: i32) returns i32
  rpc PRI_SetTriggerLevel(dev_idx: i32, slot_id: i32, trg_level: i32) -> Result<()>
  rpc PRI_GetFrequencyLimits(dev_idx: i32, slot_id: i32) -> Result<(i32, i32)>
  rpc PRI_GetFrequency(dev_idx: i32, slot_id: i32) returns i32
  rpc PRI_SetFrequency(dev_idx: i32, slot_id: i32, frequency: i32) -> Result<()>
  rpc PRI_GetGatingLimits(dev_idx: i32, slot_id: i32) returns PrimaGatingInfo
  rpc PRI_GetGatingData(dev_idx: i32, slot_id: i32) -> Result<(i32, i32)>
  rpc PRI_SetGatingData( dev_idx: i32, slot_id: i32, on_time: i32, off_time_factor: i32) -> Result<()>
  rpc PRI_GetGatingEnabled(dev_idx: i32, slot_id: i32) returns bool
  rpc PRI_SetGatingEnabled(dev_idx: i32, slot_id: i32, gating_enabled: bool) -> Result<()>
  rpc PRI_GetGateHighImpedance(dev_idx: i32, slot_id: i32) returns bool
  rpc PRI_SetGateHighImpedance(dev_idx: i32, slot_id: i32, high_impedance: bool) -> Result<()>
  rpc PRI_DecodeWavelength(dev_idx: i32, slot_id: i32, wl_idx: i32) returns i32
  rpc PRI_GetWavelengthIdx(dev_idx: i32, slot_id: i32) returns i32
  rpc PRI_SetWavelengthIdx(dev_idx: i32, slot_id: i32, wl_idx: i32) -> Result<()>
  rpc PRI_GetIntensity(dev_idx: i32, slot_id: i32, wl_idx: i32) returns u16
  rpc PRI_SetIntensity(dev_idx: i32, slot_id: i32, wl_idx: i32, w_intensity: u16) -> Result<()>
}


// --------------------------------------------------------------------------------
// Error type: Sepia2Error
// --------------------------------------------------------------------------------

message Error {
}
