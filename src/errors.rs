use crate::bindings::errors::*;
use std::fmt;

//type Result<T> = std::result::Result<T, Sepia2Error>;

#[repr(i32)]
#[derive(Debug, Clone, Copy, PartialEq, Eq)]
pub enum Sepia2Error {
    FwMemoryAllocationError                       = SEPIA2_ERR_FW_MEMORY_ALLOCATION_ERROR,                          //  "FW: memory allocation error"
    FwCrcErrorWhileCheckingScm828Module           = SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_SCM_828_MODULE,          //  "FW: CRC error while checking SCM 828 module"
    FwCrcErrorWhileCheckingBackplane              = SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_BACKPLANE,               //  "FW: CRC error while checking backplane"
    FwCrcErrorWhileCheckingModule                 = SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_MODULE,                  //  "FW: CRC error while checking module"
    FwMapsizeError                                = SEPIA2_ERR_FW_MAPSIZE_ERROR,                                    //  "FW: mapsize error"
    FwUnknownErrorPhase                           = SEPIA2_ERR_FW_UNKNOWN_ERROR_PHASE,                              //  "FW: unknown error phase"
    FwInsufficientFwVersion                       = SEPIA2_ERR_FW_INSUFFICIENT_FW_VERSION,                          //  "FW: insufficient FW version"
    FwWrongWorkingmode                            = SEPIA2_ERR_FW_WRONG_WORKINGMODE,                                //  "FW: wrong workingmode"
    FwIllegalModuleChange                         = SEPIA2_ERR_FW_ILLEGAL_MODULE_CHANGE,                            //  "FW: illegal module change"

    UsbWrongDriverVersion                         = SEPIA2_ERR_USB_WRONG_DRIVER_VERSION,                            //  "USB: wrong driver version"
    UsbOpenDeviceError                            = SEPIA2_ERR_USB_OPEN_DEVICE_ERROR,                               //  "USB: open device error"
    UsbDeviceBusy                                 = SEPIA2_ERR_USB_DEVICE_BUSY,                                     //  "USB: device busy"
    UsbCloseDeviceError                           = SEPIA2_ERR_USB_CLOSE_DEVICE_ERROR,                              //  "USB: close device error"
    UsbDeviceChanged                              = SEPIA2_ERR_USB_DEVICE_CHANGED,                                  //  "USB: device changed"
    I2cAddressError                               = SEPIA2_ERR_I2C_ADDRESS_ERROR,                                   //  "I2C: address error"
    UsbDeviceIndexError                           = SEPIA2_ERR_USB_DEVICE_INDEX_ERROR,                              //  "USB: device index error"
    I2cIllegalMultiplexerPath                     = SEPIA2_ERR_I2C_ILLEGAL_MULTIPLEXER_PATH,                        //  "I2C: illegal multiplexer path"
    I2cIllegalMultiplexerLevel                    = SEPIA2_ERR_I2C_ILLEGAL_MULTIPLEXER_LEVEL,                       //  "I2C: illegal multiplexer level"
    I2cIllegalSlotId                              = SEPIA2_ERR_I2C_ILLEGAL_SLOT_ID,                                 //  "I2C: illegal slot id"
    FramNoUptimeCounter                           = SEPIA2_ERR_FRAM_NO_UPTIME_COUNTER,                              //  "FRAM: no uptime counter"
    FramBlockwriteError                           = SEPIA2_ERR_FRAM_BLOCKWRITE_ERROR,                               //  "FRAM: blockwrite error"
    FramBlockreadError                            = SEPIA2_ERR_FRAM_BLOCKREAD_ERROR,                                //  "FRAM: blockread error"
    FramCrcBlockcheckError                        = SEPIA2_ERR_FRAM_CRC_BLOCKCHECK_ERROR,                           //  "FRAM: CRC blockcheck error"
    RamBlockAllocationError                       = SEPIA2_ERR_RAM_BLOCK_ALLOCATION_ERROR,                          //  "RAM: block allocation error"
    RamSecureMemoryHandlingError                  = SEPIA2_ERR_RAM_SECURE_MEMORY_HANDLING_ERROR,                    //  "RAM: secure memory handling error"
    I2cInitialisingCommandExecutionError          = SEPIA2_ERR_I2C_INITIALISING_COMMAND_EXECUTION_ERROR,            //  "I2C: initialising command execution error"
    I2cFetchingInitialisingCommandsError          = SEPIA2_ERR_I2C_FETCHING_INITIALISING_COMMANDS_ERROR,            //  "I2C: fetching initialising commands error"
    I2cWritingInitialisingCommandsError           = SEPIA2_ERR_I2C_WRITING_INITIALISING_COMMANDS_ERROR,             //  "I2C: writing initialising commands error"
    I2cModuleCalibratingError                     = SEPIA2_ERR_I2C_MODULE_CALIBRATING_ERROR,                        //  "I2C: module calibrating error"
    I2cFetchingCalibratingCommandsError           = SEPIA2_ERR_I2C_FETCHING_CALIBRATING_COMMANDS_ERROR,             //  "I2C: fetching calibrating commands error"
    I2cWritingCalibratingCommandsError            = SEPIA2_ERR_I2C_WRITING_CALIBRATING_COMMANDS_ERROR,              //  "I2C: writing calibrating commands error"
    DclFileOpenError                              = SEPIA2_ERR_DCL_FILE_OPEN_ERROR,                                 //  "DCL: file open error"
    DclWrongFileLength                            = SEPIA2_ERR_DCL_WRONG_FILE_LENGTH,                               //  "DCL: wrong file length"
    DclFileReadError                              = SEPIA2_ERR_DCL_FILE_READ_ERROR,                                 //  "DCL: file read error"
    FramIsWriteProtected                          = SEPIA2_ERR_FRAM_IS_WRITE_PROTECTED,                             //  "FRAM: is write protected"
    DclFileSpecifiesDifferentModuletype           = SEPIA2_ERR_DCL_FILE_SPECIFIES_DIFFERENT_MODULETYPE,             //  "DCL: file specifies different moduletype"
    DclFileSpecifiesDifferentSerialNumber         = SEPIA2_ERR_DCL_FILE_SPECIFIES_DIFFERENT_SERIAL_NUMBER,          //  "DCL: file specifies different serial number"

    I2cInvalidArgument                            = SEPIA2_ERR_I2C_INVALID_ARGUMENT,                                //  "I2C: invalid argument"
    I2cNoAcknowledgeOnWriteAdressbyte             = SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_WRITE_ADRESSBYTE,              //  "I2C: no acknowledge on write adressbyte"
    I2cNoAcknowledgeOnReadAdressbyte              = SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_READ_ADRESSBYTE,               //  "I2C: no acknowledge on read adressbyte"
    I2cNoAcknowledgeOnWriteDatabyte               = SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_WRITE_DATABYTE,                //  "I2C: no acknowledge on write databyte"
    I2cReadBackError                              = SEPIA2_ERR_I2C_READ_BACK_ERROR,                                 //  "I2C: read back error"
    I2cReadError                                  = SEPIA2_ERR_I2C_READ_ERROR,                                      //  "I2C: read error"
    I2cWriteError                                 = SEPIA2_ERR_I2C_WRITE_ERROR,                                     //  "I2C: write error"
    IOFileError                                   = SEPIA2_ERR_I_O_FILE_ERROR,                                      //  "I/O: file error"
    I2cMultiplexerError                           = SEPIA2_ERR_I2C_MULTIPLEXER_ERROR,                               //  "I2C: multiplexer error"
    I2cMultiplexerPathError                       = SEPIA2_ERR_I2C_MULTIPLEXER_PATH_ERROR,                          //  "I2C: multiplexer path error"
    UsbInitFailed                                 = SEPIA2_ERR_USB_INIT_FAILED,                                     //  "USB: init failed"
    UsbInvalidArgument                            = SEPIA2_ERR_USB_INVALID_ARGUMENT,                                //  "USB: invalid argument"
    UsbDeviceStillOpen                            = SEPIA2_ERR_USB_DEVICE_STILL_OPEN,                               //  "USB: device still open"
    UsbNoMemory                                   = SEPIA2_ERR_USB_NO_MEMORY,                                       //  "USB: no memory"
    UsbOpenFailed                                 = SEPIA2_ERR_USB_OPEN_FAILED,                                     //  "USB: open failed"
    UsbGetDescriptorFailed                        = SEPIA2_ERR_USB_GET_DESCRIPTOR_FAILED,                           //  "USB: get descriptor failed"
    UsbInappropriateDevice                        = SEPIA2_ERR_USB_INAPPROPRIATE_DEVICE,                            //  "USB: inappropriate device"
    UsbBusyDevice                                 = SEPIA2_ERR_USB_BUSY_DEVICE,                                     //  "USB: busy device"
    UsbInvalidHandle                              = SEPIA2_ERR_USB_INVALID_HANDLE,                                  //  "USB: invalid handle"
    UsbInvalidDescriptorBuffer                    = SEPIA2_ERR_USB_INVALID_DESCRIPTOR_BUFFER,                       //  "USB: invalid descriptor buffer"
    UsbIoctrlFailed                               = SEPIA2_ERR_USB_IOCTRL_FAILED,                                   //  "USB: IOCTRL failed"
    UsbVcmdFailed                                 = SEPIA2_ERR_USB_VCMD_FAILED,                                     //  "USB: vcmd failed"
    UsbNoSuchPipe                                 = SEPIA2_ERR_USB_NO_SUCH_PIPE,                                    //  "USB: no such pipe"
    UsbRegisterNotificationFailed                 = SEPIA2_ERR_USB_REGISTER_NOTIFICATION_FAILED,                    //  "USB: register notification failed"
    UsbUnknownDevice                              = SEPIA2_ERR_USB_UNKNOWN_DEVICE,                                  //  "USB: unknown device"
    UsbWrongDriver                                = SEPIA2_ERR_USB_WRONG_DRIVER,                                    //  "USB: wrong driver"
    UsbWindowsError                               = SEPIA2_ERR_USB_WINDOWS_ERROR,                                   //  "USB: windows error"
    UsbDeviceNotOpen                              = SEPIA2_ERR_USB_DEVICE_NOT_OPEN,                                 //  "USB: device not open"
    I2cDeviceError                                = SEPIA2_ERR_I2C_DEVICE_ERROR,                                    //  "I2C: device error"
    Lmp1AdcTablesNotFound                         = SEPIA2_ERR_LMP1_ADC_TABLES_NOT_FOUND,                           //  "LMP1: ADC tables not found"
    Lmp1AdcOverflow                               = SEPIA2_ERR_LMP1_ADC_OVERFLOW,                                   //  "LMP1: ADC overflow"
    Lmp1AdcUnderflow                              = SEPIA2_ERR_LMP1_ADC_UNDERFLOW,                                  //  "LMP1: ADC underflow"

    ScmVoltageLimitsTableNotFound                 = SEPIA2_ERR_SCM_VOLTAGE_LIMITS_TABLE_NOT_FOUND,                  //  "SCM: voltage limits table not found"
    ScmVoltageScalingListNotFound                 = SEPIA2_ERR_SCM_VOLTAGE_SCALING_LIST_NOT_FOUND,                  //  "SCM: voltage scaling list not found"
    ScmRepeatedlyMeasuredVoltageFailure           = SEPIA2_ERR_SCM_REPEATEDLY_MEASURED_VOLTAGE_FAILURE,             //  "SCM: repeatedly measured voltage failure"
    ScmPowerSupplyLine0VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 0: voltage too low"
    ScmPowerSupplyLine1VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 1: voltage too low"
    ScmPowerSupplyLine2VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_2_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 2: voltage too low"
    ScmPowerSupplyLine3VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_3_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 3: voltage too low"
    ScmPowerSupplyLine4VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_4_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 4: voltage too low"
    ScmPowerSupplyLine5VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_5_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 5: voltage too low"
    ScmPowerSupplyLine6VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_6_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 6: voltage too low"
    ScmPowerSupplyLine7VoltageTooLow              = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_7_VOLTAGE_TOO_LOW,             //  "SCM: power supply line 7: voltage too low"
    ScmPowerSupplyLine0VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 0: voltage too high"
    ScmPowerSupplyLine1VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 1: voltage too high"
    ScmPowerSupplyLine2VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_2_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 2: voltage too high"
    ScmPowerSupplyLine3VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_3_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 3: voltage too high"
    ScmPowerSupplyLine4VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_4_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 4: voltage too high"
    ScmPowerSupplyLine5VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_5_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 5: voltage too high"
    ScmPowerSupplyLine6VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_6_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 6: voltage too high"
    ScmPowerSupplyLine7VoltageTooHigh             = SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_7_VOLTAGE_TOO_HIGH,            //  "SCM: power supply line 7: voltage too high"
    ScmPowerSupplyLaserTurningOffVoltageTooHigh   = SEPIA2_ERR_SCM_POWER_SUPPLY_LASER_TURNING_OFF_VOLTAGE_TOO_HIGH, //  "SCM: power supply laser turning-off-voltage too high"
    ScmInvalidTemperatureTableCount               = SEPIA2_ERR_SCM_INVALID_TEMPERATURE_TABLE_COUNT,                 //  "SCM: invalid temperature table count"
    ScmTconfgTableReadFailed                      = SEPIA2_ERR_SCM_TCONFG_TABLE_READ_FAILED,                        //  "SCM: tconfg table read failed"
    ScmInvalidNumberOfTableEntries                = SEPIA2_ERR_SCM_INVALID_NUMBER_OF_TABLE_ENTRIES,                 //  "SCM: invalid number of table entries"
    ScmInvalidTimertickValue                      = SEPIA2_ERR_SCM_INVALID_TIMERTICK_VALUE,                         //  "SCM: invalid timertick value"
    ScmInvalidTemperatureValueTable               = SEPIA2_ERR_SCM_INVALID_TEMPERATURE_VALUE_TABLE,                 //  "SCM: invalid temperature value table"
    ScmInvalidDacControlTableA                    = SEPIA2_ERR_SCM_INVALID_DAC_CONTROL_TABLE_A,                     //  "SCM: invalid DAC control table A"
    ScmInvalidDacControlTableB                    = SEPIA2_ERR_SCM_INVALID_DAC_CONTROL_TABLE_B,                     //  "SCM: invalid DAC control table B"
    ScmTemperatureTableReadFailed                 = SEPIA2_ERR_SCM_TEMPERATURE_TABLE_READ_FAILED,                   //  "SCM: temperature table read failed"

    SomIntOscillatorSFreqListNotFound             = SEPIA2_ERR_SOM_INT_OSCILLATOR_S_FREQ_LIST_NOT_FOUND,            //  "SOM: int. oscillator's freq.-list not found"
    SomTriggerModeListNotFound                    = SEPIA2_ERR_SOM_TRIGGER_MODE_LIST_NOT_FOUND,                     //  "SOM: trigger mode list not found"
    SomTriggerLevelNotFound                       = SEPIA2_ERR_SOM_TRIGGER_LEVEL_NOT_FOUND,                         //  "SOM: trigger level not found"
    SomPredividerPretriggerOrTriggermaskNotFound  = SEPIA2_ERR_SOM_PREDIVIDER_PRETRIGGER_OR_TRIGGERMASK_NOT_FOUND,  //  "SOM: predivider, pretrigger or triggermask not found"
    SomBurstlengthNotFound                        = SEPIA2_ERR_SOM_BURSTLENGTH_NOT_FOUND,                           //  "SOM: burstlength not found"
    SomOutputAndSyncEnableNotFound                = SEPIA2_ERR_SOM_OUTPUT_AND_SYNC_ENABLE_NOT_FOUND,                //  "SOM: output and sync enable not found"
    SomTriggerLevelOutOfBounds                    = SEPIA2_ERR_SOM_TRIGGER_LEVEL_OUT_OF_BOUNDS,                     //  "SOM: trigger level out of bounds"
    SomIllegalFrequencyTriggermode                = SEPIA2_ERR_SOM_ILLEGAL_FREQUENCY_TRIGGERMODE,                   //  "SOM: illegal frequency / triggermode"
    SomIllegalFrequencyDivider                    = SEPIA2_ERR_SOM_ILLEGAL_FREQUENCY_DIVIDER,                       //  "SOM: illegal frequency divider"
    SomIllegalPresync                             = SEPIA2_ERR_SOM_ILLEGAL_PRESYNC,                                 //  "SOM: illegal presync (greater than divider)"
    SomIllegalBurstLength                         = SEPIA2_ERR_SOM_ILLEGAL_BURST_LENGTH,                            //  "SOM: illegal burst length (>/= 2^24 or < 0)"
    SomAuxIoCtrlNotFound                          = SEPIA2_ERR_SOM_AUX_IO_CTRL_NOT_FOUND,                           //  "SOM: AUX I/O control data not found"
    SomIllegalAuxOutCtrl                          = SEPIA2_ERR_SOM_ILLEGAL_AUX_OUT_CTRL,                            //  "SOM: illegal AUX output control data"
    SomIllegalAuxInCtrl                           = SEPIA2_ERR_SOM_ILLEGAL_AUX_IN_CTRL,                             //  "SOM: illegal AUX input control data"
    SomdIntOscillatorSFreqListNotFound            = SEPIA2_ERR_SOMD_INT_OSCILLATOR_S_FREQ_LIST_NOT_FOUND,           //  "SOMD: int. oscillator's freq.-list not found"
    SomdTriggerModeListNotFound                   = SEPIA2_ERR_SOMD_TRIGGER_MODE_LIST_NOT_FOUND,                    //  "SOMD: trigger mode list not found"
    SomdTriggerLevelNotFound                      = SEPIA2_ERR_SOMD_TRIGGER_LEVEL_NOT_FOUND,                        //  "SOMD: trigger level not found"
    SomdPredividerPretriggerOrTriggermaskNotFound = SEPIA2_ERR_SOMD_PREDIVIDER_PRETRIGGER_OR_TRIGGERMASK_NOT_FOUND, //  "SOMD: predivider, pretrigger or triggermask not found"
    SomdBurstlengthNotFound                       = SEPIA2_ERR_SOMD_BURSTLENGTH_NOT_FOUND,                          //  "SOMD: burstlength not found"
    SomdOutputAndSyncEnableNotFound               = SEPIA2_ERR_SOMD_OUTPUT_AND_SYNC_ENABLE_NOT_FOUND,               //  "SOMD: output and sync enable not found"
    SomdTriggerLevelOutOfBounds                   = SEPIA2_ERR_SOMD_TRIGGER_LEVEL_OUT_OF_BOUNDS,                    //  "SOMD: trigger level out of bounds"
    SomdIllegalFrequencyTriggermode               = SEPIA2_ERR_SOMD_ILLEGAL_FREQUENCY_TRIGGERMODE,                  //  "SOMD: illegal frequency / triggermode"
    SomdIllegalFrequencyDivider                   = SEPIA2_ERR_SOMD_ILLEGAL_FREQUENCY_DIVIDER,                      //  "SOMD: illegal frequency divider"
    SomdIllegalPresync                            = SEPIA2_ERR_SOMD_ILLEGAL_PRESYNC,                                //  "SOMD: illegal presync (greater than divider)"
    SomdIllegalBurstLength                        = SEPIA2_ERR_SOMD_ILLEGAL_BURST_LENGTH,                           //  "SOMD: illegal burst length (>/= 2^24 or < 0)"
    SomdAuxIoCtrlNotFound                         = SEPIA2_ERR_SOMD_AUX_IO_CTRL_NOT_FOUND,                          //  "SOMD: AUX I/O control data not found"
    SomdIllegalAuxOutCtrl                         = SEPIA2_ERR_SOMD_ILLEGAL_AUX_OUT_CTRL,                           //  "SOMD: illegal AUX output control data"
    SomdIllegalAuxInCtrl                          = SEPIA2_ERR_SOMD_ILLEGAL_AUX_IN_CTRL,                            //  "SOMD: illegal AUX input control data"
    SomdIllegalOutMuxCtrl                         = SEPIA2_ERR_SOMD_ILLEGAL_OUT_MUX_CTRL,                           //  "SOMD: illegal output multiplexer control data"
    SomdOutputDelayDataNotFound                   = SEPIA2_ERR_SOMD_OUTPUT_DELAY_DATA_NOT_FOUND,                    //  "SOMD: output delay data not found"
    SomdIllegalOutputDelayData                    = SEPIA2_ERR_SOMD_ILLEGAL_OUTPUT_DELAY_DATA,                      //  "SOMD: illegal output delay data"
    SomdDelayNotAllowedInTriggerMode              = SEPIA2_ERR_SOMD_DELAY_NOT_ALLOWED_IN_TRIGGER_MODE,              //  "SOMD: delay not allowed in current trigger mode"
    SomdDeviceInitializing                        = SEPIA2_ERR_SOMD_DEVICE_INITIALIZING,                            //  "SOMD: device initializing"
    SomdDeviceBusy                                = SEPIA2_ERR_SOMD_DEVICE_BUSY,                                    //  "SOMD: device busy"
    SomdPllNotLocked                              = SEPIA2_ERR_SOMD_PLL_NOT_LOCKED,                                 //  "SOMD: PLL not locked"
    SomdFwUpdateFailed                            = SEPIA2_ERR_SOMD_FW_UPDATE_FAILED,                               //  "SOMD: firmware update failed"
    SomdFwCrcCheckFailed                          = SEPIA2_ERR_SOMD_FW_CRC_CHECK_FAILED,                            //  "SOMD: firmware CRC check failed"
    SomdHwTriggersourceError                      = SEPIA2_ERR_SOMD_HW_TRIGGERSOURCE_ERROR,                         //  "SOMD HW: triggersource error"
    SomdHwSychronizeNowError                      = SEPIA2_ERR_SOMD_HW_SYCHRONIZE_NOW_ERROR,                        //  "SOMD HW: sychronize now error"
    SomdHwSyncRangeError                          = SEPIA2_ERR_SOMD_HW_SYNC_RANGE_ERROR,                            //  "SOMD HW: SYNC range error"
    SomdHwIllegalOutMuxCtrl                       = SEPIA2_ERR_SOMD_HW_ILLEGAL_OUT_MUX_CTRL,                        //  "SOMD HW: illegal output multiplexer control data"
    SomdHwSetDelayError                           = SEPIA2_ERR_SOMD_HW_SET_DELAY_ERROR,                             //  "SOMD HW: set delay error"
    SomdHwAuxIoCommandError                       = SEPIA2_ERR_SOMD_HW_AUX_IO_COMMAND_ERROR,                        //  "SOMD HW: AUX I/O command error"
    SomdHwPllNotStable                            = SEPIA2_ERR_SOMD_HW_PLL_NOT_STABLE,                              //  "SOMD HW: PLL not stable"
    SomdHwBurstLengthError                        = SEPIA2_ERR_SOMD_HW_BURST_LENGTH_ERROR,                          //  "SOMD HW: burst length error"
    SomdHwOutMuxCommandError                      = SEPIA2_ERR_SOMD_HW_OUT_MUX_COMMAND_ERROR,                       //  "SOMD HW: output multiplexer command error"
    SomdHwCoarseDelaySetError                     = SEPIA2_ERR_SOMD_HW_COARSE_DELAY_SET_ERROR,                      //  "SOMD HW: coarse delay set error"
    SomdHwFineDelaySetError                       = SEPIA2_ERR_SOMD_HW_FINE_DELAY_SET_ERROR,                        //  "SOMD HW: fine delay set error"
    SomdHwFwEpromError                            = SEPIA2_ERR_SOMD_HW_FW_EPROM_ERROR,                              //  "SOMD HW: firmware EPROM error"
    SomdHwCrcErrorOnWritingFirmware               = SEPIA2_ERR_SOMD_HW_CRC_ERROR_ON_WRITING_FIRMWARE,               //  "SOMD HW: CRC error on writing firmware"
    SomdHwCalibrationDataNotFound                 = SEPIA2_ERR_SOMD_HW_CALIBRATION_DATA_NOT_FOUND,                  //  "SOMD HW: calibration data not found"
    SomdHwWrongExternalFrequency                  = SEPIA2_ERR_SOMD_HW_WRONG_EXTERNAL_FREQUENCY,                    //  "SOMD HW: wrong external frequency"
    SomdHwExternalFrequencyNotStable              = SEPIA2_ERR_SOMD_HW_EXTERNAL_FREQUENCY_NOT_STABLE,               //  "SOMD HW: external frequency not stable"

    SlmIllegalFrequencyTriggermode                = SEPIA2_ERR_SLM_ILLEGAL_FREQUENCY_TRIGGERMODE,                   //  "SLM: illegal frequency / triggermode"
    SlmIllegalIntensity                           = SEPIA2_ERR_SLM_ILLEGAL_INTENSITY,                               //  "SLM: illegal intensity (> 100% or < 0%)"
    SlmIllegalHeadType                            = SEPIA2_ERR_SLM_ILLEGAL_HEAD_TYPE,                               //  "SLM: illegal head type"
    SmlIllegalIntensity                           = SEPIA2_ERR_SML_ILLEGAL_INTENSITY,                               //  "SML: illegal intensity (> 100% or < 0%)"
    SmlPowerScaleTablesNotFound                   = SEPIA2_ERR_SML_POWER_SCALE_TABLES_NOT_FOUND,                    //  "SML: power scale tables not found"
    SmlIllegalHeadType                            = SEPIA2_ERR_SML_ILLEGAL_HEAD_TYPE,                               //  "SML: illegal head type"
    VuvVirScalingTablesNotFound                   = SEPIA2_ERR_VUV_VIR_SCALING_TABLES_NOT_FOUND,                    //  "VUV/VIR: scaling tables not found"
    VuvVirDeviceTypeNotFound                      = SEPIA2_ERR_VUV_VIR_DEVICE_TYPE_NOT_FOUND,                       //  "VUV/VIR: device type not found"
    VuvVirIllegalTriggerSourceIndex               = SEPIA2_ERR_VUV_VIR_ILLEGAL_TRIGGER_SOURCE_INDEX,                //  "VUV/VIR: illegal trigger source index"
    VuvVirIllegalFrequencyDividerIndex            = SEPIA2_ERR_VUV_VIR_ILLEGAL_FREQUENCY_DIVIDER_INDEX,             //  "VUV/VIR: illegal frequency divider index"
    VuvVirIllegalTriggerLevelValue                = SEPIA2_ERR_VUV_VIR_ILLEGAL_TRIGGER_LEVEL_VALUE,                 //  "VUV/VIR: illegal trigger level value"
    VuvVirTriggerDataNotFound                     = SEPIA2_ERR_VUV_VIR_TRIGGER_DATA_NOT_FOUND,                      //  "VUV/VIR: trigger data not found"
    VuvVirIllegalPumpRegisterReadIndex            = SEPIA2_ERR_VUV_VIR_ILLEGAL_PUMP_REGISTER_READ_INDEX,            //  "VUV/VIR: illegal pump register read index"
    VuvVirIllegalPumpRegisterWriteIndex           = SEPIA2_ERR_VUV_VIR_ILLEGAL_PUMP_REGISTER_WRITE_INDEX,           //  "VUV/VIR: illegal pump register write index"
    VuvVirIntensityDataNotFound                   = SEPIA2_ERR_VUV_VIR_INTENSITY_DATA_NOT_FOUND,                    //  "VUV/VIR: intensity data not found"
    VuvVirIllegalIntensityData                    = SEPIA2_ERR_VUV_VIR_ILLEGAL_INTENSITY_DATA,                      //  "VUV/VIR: illegal intensity data"
    VuvVirUnsupportedOption                       = SEPIA2_ERR_VUV_VIR_UNSUPPORTED_OPTION,                          //  "VUV/VIR: unsupported option"
    PriUiConstantsTablesNotFound                  = SEPIA2_ERR_PRI_UI_CONSTANTS_TABLES_NOT_FOUND,                   //  "PRI: UI-constants tables not found"
    PriWavelengthsTableNotFound                   = SEPIA2_ERR_PRI_WAVELENGTHS_TABLE_NOT_FOUND,                     //  "PRI: wavelengths table not found"
    PriIllegalWavelengthIndex                     = SEPIA2_ERR_PRI_ILLEGAL_WAVELENGTH_INDEX,                        //  "PRI: illegal wavelength index"
    PriErrorOnWritingWavelengthIndex              = SEPIA2_ERR_PRI_ERROR_ON_WRITING_WAVELENGTH_INDEX,               //  "PRI: error on writing wavelength index"
    PriOperationModeTextsNotFound                 = SEPIA2_ERR_PRI_OPERATION_MODE_TEXTS_NOT_FOUND,                  //  "PRI: operation mode texts not found"
    PriOperationModeCommandsNotFound              = SEPIA2_ERR_PRI_OPERATION_MODE_COMMANDS_NOT_FOUND,               //  "PRI: operation mode commands not found"
    PriIllegalOperationModeIndex                  = SEPIA2_ERR_PRI_ILLEGAL_OPERATION_MODE_INDEX,                    //  "PRI: illegal operation mode index"
    PriErrorOnWritingOperationModeIndex           = SEPIA2_ERR_PRI_ERROR_ON_WRITING_OPERATION_MODE_INDEX,           //  "PRI: error on writing operation mode index"
    PriTriggerSourceTextsNotFound                 = SEPIA2_ERR_PRI_TRIGGER_SOURCE_TEXTS_NOT_FOUND,                  //  "PRI: trigger source texts not found"
    PriTriggerSourceCommandsNotFound              = SEPIA2_ERR_PRI_TRIGGER_SOURCE_COMMANDS_NOT_FOUND,               //  "PRI: trigger source commands not found"
    PriIllegalTriggerSourceIndex                  = SEPIA2_ERR_PRI_ILLEGAL_TRIGGER_SOURCE_INDEX,                    //  "PRI: illegal trigger source index"
    PriErrorOnWritingTriggerSourceIndex           = SEPIA2_ERR_PRI_ERROR_ON_WRITING_TRIGGER_SOURCE_INDEX,           //  "PRI: error on writing trigger source index"
    PriIllegalTriggerLevel                        = SEPIA2_ERR_PRI_ILLEGAL_TRIGGER_LEVEL,                           //  "PRI: illegal trigger level"
    PriErrorOnWritingTriggerLevel                 = SEPIA2_ERR_PRI_ERROR_ON_WRITING_TRIGGER_LEVEL,                  //  "PRI: error on writing trigger level"
    PriIllegalIntensityData                       = SEPIA2_ERR_PRI_ILLEGAL_INTENSITY_DATA,                          //  "PRI: illegal intensity data"
    PriErrorOnWritingIntensityData                = SEPIA2_ERR_PRI_ERROR_ON_WRITING_INTENSITY_DATA,                 //  "PRI: error on writing intensity data"
    PriIllegalFrequencyData                       = SEPIA2_ERR_PRI_ILLEGAL_FREQUENCY_DATA,                          //  "PRI: illegal frequency data"
    PriErrorOnWritingFrequencyData                = SEPIA2_ERR_PRI_ERROR_ON_WRITING_FREQUENCY_DATA,                 //  "PRI: error on writing frequency data"
    PriIllegalGatingData                          = SEPIA2_ERR_PRI_ILLEGAL_GATING_DATA,                             //  "PRI: illegal gating data"
    PriErrorOnWritingGatingData                   = SEPIA2_ERR_PRI_ERROR_ON_WRITING_GATING_DATA,                    //  "PRI: error on writing gating data"
    SwmCaltablesNotFound                          = SEPIA2_ERR_SWM_CALTABLES_NOT_FOUND,                             //  "SWM: calibration tables not found"
    SwmIllegalCurveIndex                          = SEPIA2_ERR_SWM_ILLEGAL_CURVE_INDEX,                             //  "SWM: illegal curve index"
    SwmIllegalTimebaseRangeIndex                  = SEPIA2_ERR_SWM_ILLEGAL_TIMEBASE_RANGE_INDEX,                    //  "SWM: illegal timebase range index"
    SwmIllegalPulseAmplitude                      = SEPIA2_ERR_SWM_ILLEGAL_PULSE_AMPLITUDE,                         //  "SWM: illegal pulse amplitude"
    SwmIllegalRampSlewRate                        = SEPIA2_ERR_SWM_ILLEGAL_RAMP_SLEW_RATE,                          //  "SWM: illegal ramp slew rate"
    SwmIllegalPulseStartDelay                     = SEPIA2_ERR_SWM_ILLEGAL_PULSE_START_DELAY,                       //  "SWM: illegal pulse start delay"
    SwmIllegalRampStartDelay                      = SEPIA2_ERR_SWM_ILLEGAL_RAMP_START_DELAY,                        //  "SWM: illegal ramp start delay"
    SwmIllegalWaveStopDelay                       = SEPIA2_ERR_SWM_ILLEGAL_WAVE_STOP_DELAY,                         //  "SWM: illegal wave stop delay"
    SwmIllegalTablename                           = SEPIA2_ERR_SWM_ILLEGAL_TABLENAME,                               //  "SWM: illegal tablename"
    SwmIllegalTableIndex                          = SEPIA2_ERR_SWM_ILLEGAL_TABLE_INDEX,                             //  "SWM: illegal table index"
    SwmIllegalTableField                          = SEPIA2_ERR_SWM_ILLEGAL_TABLE_FIELD,                             //  "SWM: illegal table field"
    SwmExtAttenuationNotFound                     = SEPIA2_ERR_SWM_EXT_ATTENUATION_NOT_FOUND,                       //  "SWM: ext. attenuation not found"
    SwmIllegalAttenuationValue                    = SEPIA2_ERR_SWM_ILLEGAL_ATTENUATION_VALUE,                       //  "SWM: illegal attenuation value"
    VclUiConstantsNotFound                        = SEPIA2_ERR_VCL_UI_CONSTANTS_NOT_FOUND,                          //  "VCL: UI-constants not found"
    VclTemperatureCaltableNotFound                = SEPIA2_ERR_VCL_TEMPERATURE_CALTABLE_NOT_FOUND,                  //  "VCL: temperature calibration table not found"
    VclBiasVoltageCaltableNotFound                = SEPIA2_ERR_VCL_BIAS_VOLTAGE_CALTABLE_NOT_FOUND,                 //  "VCL: bias voltage calibration table not found"
    VclIllegalTemperature                         = SEPIA2_ERR_VCL_ILLEGAL_TEMPERATURE,                             //  "VCL: illegal temperature"
    VclIllegalBiasVoltage                         = SEPIA2_ERR_VCL_ILLEGAL_BIAS_VOLTAGE,                            //  "VCL: illegal bias voltage"

    SpmIllegalInputValue                          = SEPIA2_ERR_SPM_ILLEGAL_INPUT_VALUE,                             //  "SPM: illegal input value"
    SpmValueOutOfBounds                           = SEPIA2_ERR_SPM_VALUE_OUT_OF_BOUNDS,                             //  "SPM: value out of bounds"
    SpmFwOutOfMemory                              = SEPIA2_ERR_SPM_FW_OUT_OF_MEMORY,                                //  "SPM FW: out of memory"
    SpmFwUpdateFailed                             = SEPIA2_ERR_SPM_FW_UPDATE_FAILED,                                //  "SPM FW: update failed"
    SpmFwCrcCheckFailed                           = SEPIA2_ERR_SPM_FW_CRC_CHECK_FAILED,                             //  "SPM FW: CRC check failed"
    SpmFwFlashDeletionFailed                      = SEPIA2_ERR_SPM_FW_FLASH_DELETION_FAILED,                        //  "SPM FW: flash deletion failed"
    SpmFwFunctionNotImplemented                   = SEPIA2_ERR_SPM_FW_FUNCTION_NOT_IMPLEMENTED,                     //  "SPM FW: function not implemented"
    SpmFwFileOpenError                            = SEPIA2_ERR_SPM_FW_FILE_OPEN_ERROR,                              //  "SPM FW: file open error"
    SpmFwFileReadError                            = SEPIA2_ERR_SPM_FW_FILE_READ_ERROR,                              //  "SPM FW: file read error"
    SsmScalingTablesNotFound                      = SEPIA2_ERR_SSM_SCALING_TABLES_NOT_FOUND,                        //  "SSM: scaling tables not found"
    SsmIllegalTriggerMode                         = SEPIA2_ERR_SSM_ILLEGAL_TRIGGER_MODE,                            //  "SSM: illegal trigger mode"
    SsmIllegalTriggerLevelValue                   = SEPIA2_ERR_SSM_ILLEGAL_TRIGGER_LEVEL_VALUE,                     //  "SSM: illegal trigger level value"
    SsmIllegalCorrectionValue                     = SEPIA2_ERR_SSM_ILLEGAL_CORRECTION_VALUE,                        //  "SSM: illegal correction value"
    SsmTriggerDataNotFound                        = SEPIA2_ERR_SSM_TRIGGER_DATA_NOT_FOUND,                          //  "SSM: trigger data not found"
    SsmCorrectionDataCommandNotFound              = SEPIA2_ERR_SSM_CORRECTION_DATA_COMMAND_NOT_FOUND,               //  "SSM: correction data command not found"
    SwsScalingTablesNotFound                      = SEPIA2_ERR_SWS_SCALING_TABLES_NOT_FOUND,                        //  "SWS: scaling tables not found"
    SwsIllegalHwModuletype                        = SEPIA2_ERR_SWS_ILLEGAL_HW_MODULETYPE,                           //  "SWS: illegal HW moduletype"
    SwsModuleNotFunctional                        = SEPIA2_ERR_SWS_MODULE_NOT_FUNCTIONAL,                           //  "SWS: module not functional"
    SwsIllegalCenterWavelength                    = SEPIA2_ERR_SWS_ILLEGAL_CENTER_WAVELENGTH,                       //  "SWS: illegal center wavelength"
    SwsIllegalBandwidth                           = SEPIA2_ERR_SWS_ILLEGAL_BANDWIDTH,                               //  "SWS: illegal bandwidth"
    SwsValueOutOfBounds                           = SEPIA2_ERR_SWS_VALUE_OUT_OF_BOUNDS,                             //  "SWS: value out of bounds"
    SwsModuleBusy                                 = SEPIA2_ERR_SWS_MODULE_BUSY,                                     //  "SWS: module busy"
    SwsFwWrongComponentAnswering                  = SEPIA2_ERR_SWS_FW_WRONG_COMPONENT_ANSWERING,                    //  "SWS FW: wrong component answering"
    SwsFwUnknownHwModuletype                      = SEPIA2_ERR_SWS_FW_UNKNOWN_HW_MODULETYPE,                        //  "SWS FW: unknown HW moduletype"
    SwsFwOutOfMemory                              = SEPIA2_ERR_SWS_FW_OUT_OF_MEMORY,                                //  "SWS FW: out of memory"
    SwsFwVersionConflict                          = SEPIA2_ERR_SWS_FW_VERSION_CONFLICT,                             //  "SWS FW: version conflict"
    SwsFwUpdateFailed                             = SEPIA2_ERR_SWS_FW_UPDATE_FAILED,                                //  "SWS FW: update failed"
    SwsFwCrcCheckFailed                           = SEPIA2_ERR_SWS_FW_CRC_CHECK_FAILED,                             //  "SWS FW: CRC check failed"
    SwsFwErrorOnFlashDeletion                     = SEPIA2_ERR_SWS_FW_ERROR_ON_FLASH_DELETION,                      //  "SWS FW: error on flash deletion"
    SwsFwCalibrationModeError                     = SEPIA2_ERR_SWS_FW_CALIBRATION_MODE_ERROR,                       //  "SWS FW: calibration mode error"
    SwsFwFunctionNotImplemented                   = SEPIA2_ERR_SWS_FW_FUNCTION_NOT_IMPLEMENTED,                     //  "SWS FW: function not implemented"
    SwsFwWrongCaltableEntry                       = SEPIA2_ERR_SWS_FW_WRONG_CALTABLE_ENTRY,                         //  "SWS FW: wrong calibration table entry"
    SwsFwInsufficientCaltableSize                 = SEPIA2_ERR_SWS_FW_INSUFFICIENT_CALTABLE_SIZE,                   //  "SWS FW: insufficient calibration table size"
    SwsFwFileOpenError                            = SEPIA2_ERR_SWS_FW_FILE_OPEN_ERROR,                              //  "SWS FW: file open error"
    SwsFwFileReadError                            = SEPIA2_ERR_SWS_FW_FILE_READ_ERROR,                              //  "SWS FW: file read error"
    SwsHwModule0AllMotorsInitTimeout              = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_INIT_TIMEOUT,             //  "SWS HW: module 0, all motors: init timeout"
    SwsHwModule0AllMotorsPlausiCheck              = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_PLAUSI_CHECK,             //  "SWS HW: module 0, all motors: plausi check"
    SwsHwModule0AllMotorsDacSetCurrent            = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_DAC_SET_CURRENT,          //  "SWS HW: module 0, all motors: DAC set current"
    SwsHwModule0AllMotorsTimeout                  = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_TIMEOUT,                  //  "SWS HW: module 0, all motors: timeout"
    SwsHwModule0AllMotorsFlashWriteError          = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_FLASH_WRITE_ERROR,        //  "SWS HW: module 0, all motors: flash write error"
    SwsHwModule0AllMotorsOutOfBounds              = SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_OUT_OF_BOUNDS,            //  "SWS HW: module 0, all motors: out of bounds"
    SwsHwModule0I2cFailure                        = SEPIA2_ERR_SWS_HW_MODULE_0_I2C_FAILURE,                         //  "SWS HW: module 0: I2C failure"
    SwsHwModule0InitFailure                       = SEPIA2_ERR_SWS_HW_MODULE_0_INIT_FAILURE,                        //  "SWS HW: module 0: init failure"
    SwsHwModule0Motor1DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_DATA_NOT_FOUND,              //  "SWS HW: module 0, motor 1: data not found"
    SwsHwModule0Motor1InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_INIT_TIMEOUT,                //  "SWS HW: module 0, motor 1: init timeout"
    SwsHwModule0Motor1PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_PLAUSI_CHECK,                //  "SWS HW: module 0, motor 1: plausi check"
    SwsHwModule0Motor1DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_DAC_SET_CURRENT,             //  "SWS HW: module 0, motor 1: DAC set current"
    SwsHwModule0Motor1Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_TIMEOUT,                     //  "SWS HW: module 0, motor 1: timeout"
    SwsHwModule0Motor1FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_FLASH_WRITE_ERROR,           //  "SWS HW: module 0, motor 1: flash write error"
    SwsHwModule0Motor1OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_OUT_OF_BOUNDS,               //  "SWS HW: module 0, motor 1: out of bounds"
    SwsHwModule0Motor2DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_DATA_NOT_FOUND,              //  "SWS HW: module 0, motor 2: data not found"
    SwsHwModule0Motor2InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_INIT_TIMEOUT,                //  "SWS HW: module 0, motor 2: init timeout"
    SwsHwModule0Motor2PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_PLAUSI_CHECK,                //  "SWS HW: module 0, motor 2: plausi check"
    SwsHwModule0Motor2DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_DAC_SET_CURRENT,             //  "SWS HW: module 0, motor 2: DAC set current"
    SwsHwModule0Motor2Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_TIMEOUT,                     //  "SWS HW: module 0, motor 2: timeout"
    SwsHwModule0Motor2FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_FLASH_WRITE_ERROR,           //  "SWS HW: module 0, motor 2: flash write error"
    SwsHwModule0Motor2OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_OUT_OF_BOUNDS,               //  "SWS HW: module 0, motor 2: out of bounds"
    SwsHwModule0Motor3DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_DATA_NOT_FOUND,              //  "SWS HW: module 0, motor 3: data not found"
    SwsHwModule0Motor3InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_INIT_TIMEOUT,                //  "SWS HW: module 0, motor 3: init timeout"
    SwsHwModule0Motor3PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_PLAUSI_CHECK,                //  "SWS HW: module 0, motor 3: plausi check"
    SwsHwModule0Motor3DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_DAC_SET_CURRENT,             //  "SWS HW: module 0, motor 3: DAC set current"
    SwsHwModule0Motor3Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_TIMEOUT,                     //  "SWS HW: module 0, motor 3: timeout"
    SwsHwModule0Motor3FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_FLASH_WRITE_ERROR,           //  "SWS HW: module 0, motor 3: flash write error"
    SwsHwModule0Motor3OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_OUT_OF_BOUNDS,               //  "SWS HW: module 0, motor 3: out of bounds"
    SwsHwModule1AllMotorsInitTimeout              = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_INIT_TIMEOUT,             //  "SWS HW: module 1, all motors: init timeout"
    SwsHwModule1AllMotorsPlausiCheck              = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_PLAUSI_CHECK,             //  "SWS HW: module 1, all motors: plausi check"
    SwsHwModule1AllMotorsDacSetCurrent            = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_DAC_SET_CURRENT,          //  "SWS HW: module 1, all motors: DAC set current"
    SwsHwModule1AllMotorsTimeout                  = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_TIMEOUT,                  //  "SWS HW: module 1, all motors: timeout"
    SwsHwModule1AllMotorsFlashWriteError          = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_FLASH_WRITE_ERROR,        //  "SWS HW: module 1, all motors: flash write error"
    SwsHwModule1AllMotorsOutOfBounds              = SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_OUT_OF_BOUNDS,            //  "SWS HW: module 1, all motors: out of bounds"
    SwsHwModule1I2cFailure                        = SEPIA2_ERR_SWS_HW_MODULE_1_I2C_FAILURE,                         //  "SWS HW: module 1: I2C failure"
    SwsHwModule1InitFailure                       = SEPIA2_ERR_SWS_HW_MODULE_1_INIT_FAILURE,                        //  "SWS HW: module 1: init failure"
    SwsHwModule1Motor1DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_DATA_NOT_FOUND,              //  "SWS HW: module 1, motor 1: data not found"
    SwsHwModule1Motor1InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_INIT_TIMEOUT,                //  "SWS HW: module 1, motor 1: init timeout"
    SwsHwModule1Motor1PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_PLAUSI_CHECK,                //  "SWS HW: module 1, motor 1: plausi check"
    SwsHwModule1Motor1DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_DAC_SET_CURRENT,             //  "SWS HW: module 1, motor 1: DAC set current"
    SwsHwModule1Motor1Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_TIMEOUT,                     //  "SWS HW: module 1, motor 1: timeout"
    SwsHwModule1Motor1FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_FLASH_WRITE_ERROR,           //  "SWS HW: module 1, motor 1: flash write error"
    SwsHwModule1Motor1OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_OUT_OF_BOUNDS,               //  "SWS HW: module 1, motor 1: out of bounds"
    SwsHwModule1Motor2DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_DATA_NOT_FOUND,              //  "SWS HW: module 1, motor 2: data not found"
    SwsHwModule1Motor2InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_INIT_TIMEOUT,                //  "SWS HW: module 1, motor 2: init timeout"
    SwsHwModule1Motor2PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_PLAUSI_CHECK,                //  "SWS HW: module 1, motor 2: plausi check"
    SwsHwModule1Motor2DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_DAC_SET_CURRENT,             //  "SWS HW: module 1, motor 2: DAC set current"
    SwsHwModule1Motor2Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_TIMEOUT,                     //  "SWS HW: module 1, motor 2: timeout"
    SwsHwModule1Motor2FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_FLASH_WRITE_ERROR,           //  "SWS HW: module 1, motor 2: flash write error"
    SwsHwModule1Motor2OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_OUT_OF_BOUNDS,               //  "SWS HW: module 1, motor 2: out of bounds"
    SwsHwModule1Motor3DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_DATA_NOT_FOUND,              //  "SWS HW: module 1, motor 3: data not found"
    SwsHwModule1Motor3InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_INIT_TIMEOUT,                //  "SWS HW: module 1, motor 3: init timeout"
    SwsHwModule1Motor3PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_PLAUSI_CHECK,                //  "SWS HW: module 1, motor 3: plausi check"
    SwsHwModule1Motor3DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_DAC_SET_CURRENT,             //  "SWS HW: module 1, motor 3: DAC set current"
    SwsHwModule1Motor3Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_TIMEOUT,                     //  "SWS HW: module 1, motor 3: timeout"
    SwsHwModule1Motor3FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_FLASH_WRITE_ERROR,           //  "SWS HW: module 1, motor 3: flash write error"
    SwsHwModule1Motor3OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_OUT_OF_BOUNDS,               //  "SWS HW: module 1, motor 3: out of bounds"
    SwsHwModule2AllMotorsInitTimeout              = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_INIT_TIMEOUT,             //  "SWS HW: module 2, all motors: init timeout"
    SwsHwModule2AllMotorsPlausiCheck              = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_PLAUSI_CHECK,             //  "SWS HW: module 2, all motors: plausi check"
    SwsHwModule2AllMotorsDacSetCurrent            = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_DAC_SET_CURRENT,          //  "SWS HW: module 2, all motors: DAC set current"
    SwsHwModule2AllMotorsTimeout                  = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_TIMEOUT,                  //  "SWS HW: module 2, all motors: timeout"
    SwsHwModule2AllMotorsFlashWriteError          = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_FLASH_WRITE_ERROR,        //  "SWS HW: module 2, all motors: flash write error"
    SwsHwModule2AllMotorsOutOfBounds              = SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_OUT_OF_BOUNDS,            //  "SWS HW: module 2, all motors: out of bounds"
    SwsHwModule2I2cFailure                        = SEPIA2_ERR_SWS_HW_MODULE_2_I2C_FAILURE,                         //  "SWS HW: module 2: I2C failure"
    SwsHwModule2InitFailure                       = SEPIA2_ERR_SWS_HW_MODULE_2_INIT_FAILURE,                        //  "SWS HW: module 2: init failure"
    SwsHwModule2Motor1DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_DATA_NOT_FOUND,              //  "SWS HW: module 2, motor 1: data not found"
    SwsHwModule2Motor1InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_INIT_TIMEOUT,                //  "SWS HW: module 2, motor 1: init timeout"
    SwsHwModule2Motor1PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_PLAUSI_CHECK,                //  "SWS HW: module 2, motor 1: plausi check"
    SwsHwModule2Motor1DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_DAC_SET_CURRENT,             //  "SWS HW: module 2, motor 1: DAC set current"
    SwsHwModule2Motor1Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_TIMEOUT,                     //  "SWS HW: module 2, motor 1: timeout"
    SwsHwModule2Motor1FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_FLASH_WRITE_ERROR,           //  "SWS HW: module 2, motor 1: flash write error"
    SwsHwModule2Motor1OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_OUT_OF_BOUNDS,               //  "SWS HW: module 2, motor 1: out of bounds"
    SwsHwModule2Motor2DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_DATA_NOT_FOUND,              //  "SWS HW: module 2, motor 2: data not found"
    SwsHwModule2Motor2InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_INIT_TIMEOUT,                //  "SWS HW: module 2, motor 2: init timeout"
    SwsHwModule2Motor2PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_PLAUSI_CHECK,                //  "SWS HW: module 2, motor 2: plausi check"
    SwsHwModule2Motor2DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_DAC_SET_CURRENT,             //  "SWS HW: module 2, motor 2: DAC set current"
    SwsHwModule2Motor2Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_TIMEOUT,                     //  "SWS HW: module 2, motor 2: timeout"
    SwsHwModule2Motor2FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_FLASH_WRITE_ERROR,           //  "SWS HW: module 2, motor 2: flash write error"
    SwsHwModule2Motor2OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_OUT_OF_BOUNDS,               //  "SWS HW: module 2, motor 2: out of bounds"
    SwsHwModule2Motor3DataNotFound                = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_DATA_NOT_FOUND,              //  "SWS HW: module 2, motor 3: data not found"
    SwsHwModule2Motor3InitTimeout                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_INIT_TIMEOUT,                //  "SWS HW: module 2, motor 3: init timeout"
    SwsHwModule2Motor3PlausiCheck                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_PLAUSI_CHECK,                //  "SWS HW: module 2, motor 3: plausi check"
    SwsHwModule2Motor3DacSetCurrent               = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_DAC_SET_CURRENT,             //  "SWS HW: module 2, motor 3: DAC set current"
    SwsHwModule2Motor3Timeout                     = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_TIMEOUT,                     //  "SWS HW: module 2, motor 3: timeout"
    SwsHwModule2Motor3FlashWriteError             = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_FLASH_WRITE_ERROR,           //  "SWS HW: module 2, motor 3: flash write error"
    SwsHwModule2Motor3OutOfBounds                 = SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_OUT_OF_BOUNDS,               //  "SWS HW: module 2, motor 3: out of bounds"

    LibTooManyUsbHandles                          = SEPIA2_ERR_LIB_TOO_MANY_USB_HANDLES,                            //  "LIB: too many USB handles"
    LibIllegalDeviceIndex                         = SEPIA2_ERR_LIB_ILLEGAL_DEVICE_INDEX,                            //  "LIB: illegal device index"
    LibUsbDeviceOpenError                         = SEPIA2_ERR_LIB_USB_DEVICE_OPEN_ERROR,                           //  "LIB: USB device open error"
    LibUsbDeviceBusyOrBlocked                     = SEPIA2_ERR_LIB_USB_DEVICE_BUSY_OR_BLOCKED,                      //  "LIB: USB device busy or blocked"
    LibUsbDeviceAlreadyOpened                     = SEPIA2_ERR_LIB_USB_DEVICE_ALREADY_OPENED,                       //  "LIB: USB device already opened"
    LibUnknownUsbHandle                           = SEPIA2_ERR_LIB_UNKNOWN_USB_HANDLE,                              //  "LIB: unknown USB handle"
    LibScm828ModuleNotFound                       = SEPIA2_ERR_LIB_SCM_828_MODULE_NOT_FOUND,                        //  "LIB: SCM 828 module not found"
    LibIllegalSlotNumber                          = SEPIA2_ERR_LIB_ILLEGAL_SLOT_NUMBER,                             //  "LIB: illegal slot number"
    LibReferencedSlotIsNotInUse                   = SEPIA2_ERR_LIB_REFERENCED_SLOT_IS_NOT_IN_USE,                   //  "LIB: referenced slot is not in use"
    LibThisIsNoScm828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_SCM_828_MODULE,                       //  "LIB: this is no SCM 828 module"
    LibThisIsNoSom828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_SOM_828_MODULE,                       //  "LIB: this is no SOM 828 module"
    LibThisIsNoSlm828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_SLM_828_MODULE,                       //  "LIB: this is no SLM 828 module"
    LibThisIsNoSml828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_SML_828_MODULE,                       //  "LIB: this is no SML 828 module"
    LibThisIsNoSwm828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_SWM_828_MODULE,                       //  "LIB: this is no SWM 828 module"
    LibThisIsNoSsmModule                          = SEPIA2_ERR_LIB_THIS_IS_NO_SSM_MODULE,                           //  "LIB: this is no SSM module"
    LibThisIsNoSwsModule                          = SEPIA2_ERR_LIB_THIS_IS_NO_SWS_MODULE,                           //  "LIB: this is no SWS module"
    LibThisIsNoSpmModule                          = SEPIA2_ERR_LIB_THIS_IS_NO_SPM_MODULE,                           //  "LIB: this is no SPM module"
    LibThisIsNoLmp1                               = SEPIA2_ERR_LIB_THIS_IS_NO_LMP1,                                 //  "LIB: this is no LMP1 (metermodule w. shuttercontrol)"
    LibThisIsNoSom828DModule                      = SEPIA2_ERR_LIB_THIS_IS_NO_SOM_828_D_MODULE,                     //  "LIB: this is no SOM 828 D module"
    LibNoMapFound                                 = SEPIA2_ERR_LIB_NO_MAP_FOUND,                                    //  "LIB: no map found"
    LibThisIsNoLmp8                               = SEPIA2_ERR_LIB_THIS_IS_NO_LMP8,                                 //  "LIB: this is no LMP8 (eightfold metermodule)"
    LibThisIsNoVcl828Module                       = SEPIA2_ERR_LIB_THIS_IS_NO_VCL_828_MODULE,                       //  "LIB: this is no VCL 828 module"
    LibThisIsNoVuvNorVirModule                    = SEPIA2_ERR_LIB_THIS_IS_NO_VUV_NOR_VIR_MODULE,                   //  "LIB: this is no VUV nor VIR module"
    LibThisIsNoPriModule                          = SEPIA2_ERR_LIB_THIS_IS_NO_PRI_MODULE,                           //  "LIB: this is no PRI module"
    LibDeviceChangedReInitialiseUsbDeviceList     = SEPIA2_ERR_LIB_DEVICE_CHANGED_RE_INITIALISE_USB_DEVICE_LIST,    //  "LIB: device changed, re-initialise USB device list"
    LibInappropriateUsbDevice                     = SEPIA2_ERR_LIB_INAPPROPRIATE_USB_DEVICE,                        //  "LIB: inappropriate USB device"
    LibWrongUsbDriverVersion                      = SEPIA2_ERR_LIB_WRONG_USB_DRIVER_VERSION,                        //  "LIB: wrong USB driver version"
    LibUnknownFunction                            = SEPIA2_ERR_LIB_UNKNOWN_FUNCTION,                                //  "LIB: unknown function"
    LibIllegalParameterOnFunctionCall             = SEPIA2_ERR_LIB_ILLEGAL_PARAMETER_ON_FUNCTION_CALL,              //  "LIB: illegal parameter on function call"
    LibUnknownErrorCode                           = SEPIA2_ERR_LIB_UNKNOWN_ERROR_CODE,                              //  "LIB: unknown error code"
}

impl std::error::Error for Sepia2Error {}

impl Sepia2Error {
    pub fn from_raw(raw: i32) -> Result<(), Self> {
        if raw >= 0
        {
            Ok(())
        } else {
            use Sepia2Error::*;
            // TODO: Write macro that populates this conversion from C define to Rust enum
            let sepia2_error = match raw {
                SEPIA2_ERR_FW_MEMORY_ALLOCATION_ERROR                          => FwMemoryAllocationError,
                SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_SCM_828_MODULE          => FwCrcErrorWhileCheckingScm828Module,
                SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_BACKPLANE               => FwCrcErrorWhileCheckingBackplane,
                SEPIA2_ERR_FW_CRC_ERROR_WHILE_CHECKING_MODULE                  => FwCrcErrorWhileCheckingModule,
                SEPIA2_ERR_FW_MAPSIZE_ERROR                                    => FwMapsizeError,
                SEPIA2_ERR_FW_UNKNOWN_ERROR_PHASE                              => FwUnknownErrorPhase,
                SEPIA2_ERR_FW_INSUFFICIENT_FW_VERSION                          => FwInsufficientFwVersion,
                SEPIA2_ERR_FW_WRONG_WORKINGMODE                                => FwWrongWorkingmode,
                SEPIA2_ERR_FW_ILLEGAL_MODULE_CHANGE                            => FwIllegalModuleChange,

                SEPIA2_ERR_USB_WRONG_DRIVER_VERSION                            => UsbWrongDriverVersion,
                SEPIA2_ERR_USB_OPEN_DEVICE_ERROR                               => UsbOpenDeviceError,
                SEPIA2_ERR_USB_DEVICE_BUSY                                     => UsbDeviceBusy,
                SEPIA2_ERR_USB_CLOSE_DEVICE_ERROR                              => UsbCloseDeviceError,
                SEPIA2_ERR_USB_DEVICE_CHANGED                                  => UsbDeviceChanged,
                SEPIA2_ERR_I2C_ADDRESS_ERROR                                   => I2cAddressError,
                SEPIA2_ERR_USB_DEVICE_INDEX_ERROR                              => UsbDeviceIndexError,
                SEPIA2_ERR_I2C_ILLEGAL_MULTIPLEXER_PATH                        => I2cIllegalMultiplexerPath,
                SEPIA2_ERR_I2C_ILLEGAL_MULTIPLEXER_LEVEL                       => I2cIllegalMultiplexerLevel,
                SEPIA2_ERR_I2C_ILLEGAL_SLOT_ID                                 => I2cIllegalSlotId,
                SEPIA2_ERR_FRAM_NO_UPTIME_COUNTER                              => FramNoUptimeCounter,
                SEPIA2_ERR_FRAM_BLOCKWRITE_ERROR                               => FramBlockwriteError,
                SEPIA2_ERR_FRAM_BLOCKREAD_ERROR                                => FramBlockreadError,
                SEPIA2_ERR_FRAM_CRC_BLOCKCHECK_ERROR                           => FramCrcBlockcheckError,
                SEPIA2_ERR_RAM_BLOCK_ALLOCATION_ERROR                          => RamBlockAllocationError,
                SEPIA2_ERR_RAM_SECURE_MEMORY_HANDLING_ERROR                    => RamSecureMemoryHandlingError,
                SEPIA2_ERR_I2C_INITIALISING_COMMAND_EXECUTION_ERROR            => I2cInitialisingCommandExecutionError,
                SEPIA2_ERR_I2C_FETCHING_INITIALISING_COMMANDS_ERROR            => I2cFetchingInitialisingCommandsError,
                SEPIA2_ERR_I2C_WRITING_INITIALISING_COMMANDS_ERROR             => I2cWritingInitialisingCommandsError,
                SEPIA2_ERR_I2C_MODULE_CALIBRATING_ERROR                        => I2cModuleCalibratingError,
                SEPIA2_ERR_I2C_FETCHING_CALIBRATING_COMMANDS_ERROR             => I2cFetchingCalibratingCommandsError,
                SEPIA2_ERR_I2C_WRITING_CALIBRATING_COMMANDS_ERROR              => I2cWritingCalibratingCommandsError,
                SEPIA2_ERR_DCL_FILE_OPEN_ERROR                                 => DclFileOpenError,
                SEPIA2_ERR_DCL_WRONG_FILE_LENGTH                               => DclWrongFileLength,
                SEPIA2_ERR_DCL_FILE_READ_ERROR                                 => DclFileReadError,
                SEPIA2_ERR_FRAM_IS_WRITE_PROTECTED                             => FramIsWriteProtected,
                SEPIA2_ERR_DCL_FILE_SPECIFIES_DIFFERENT_MODULETYPE             => DclFileSpecifiesDifferentModuletype,
                SEPIA2_ERR_DCL_FILE_SPECIFIES_DIFFERENT_SERIAL_NUMBER          => DclFileSpecifiesDifferentSerialNumber,

                SEPIA2_ERR_I2C_INVALID_ARGUMENT                                => I2cInvalidArgument,
                SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_WRITE_ADRESSBYTE              => I2cNoAcknowledgeOnWriteAdressbyte,
                SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_READ_ADRESSBYTE               => I2cNoAcknowledgeOnReadAdressbyte,
                SEPIA2_ERR_I2C_NO_ACKNOWLEDGE_ON_WRITE_DATABYTE                => I2cNoAcknowledgeOnWriteDatabyte,
                SEPIA2_ERR_I2C_READ_BACK_ERROR                                 => I2cReadBackError,
                SEPIA2_ERR_I2C_READ_ERROR                                      => I2cReadError,
                SEPIA2_ERR_I2C_WRITE_ERROR                                     => I2cWriteError,
                SEPIA2_ERR_I_O_FILE_ERROR                                      => IOFileError,
                SEPIA2_ERR_I2C_MULTIPLEXER_ERROR                               => I2cMultiplexerError,
                SEPIA2_ERR_I2C_MULTIPLEXER_PATH_ERROR                          => I2cMultiplexerPathError,
                SEPIA2_ERR_USB_INIT_FAILED                                     => UsbInitFailed,
                SEPIA2_ERR_USB_INVALID_ARGUMENT                                => UsbInvalidArgument,
                SEPIA2_ERR_USB_DEVICE_STILL_OPEN                               => UsbDeviceStillOpen,
                SEPIA2_ERR_USB_NO_MEMORY                                       => UsbNoMemory,
                SEPIA2_ERR_USB_OPEN_FAILED                                     => UsbOpenFailed,
                SEPIA2_ERR_USB_GET_DESCRIPTOR_FAILED                           => UsbGetDescriptorFailed,
                SEPIA2_ERR_USB_INAPPROPRIATE_DEVICE                            => UsbInappropriateDevice,
                SEPIA2_ERR_USB_BUSY_DEVICE                                     => UsbBusyDevice,
                SEPIA2_ERR_USB_INVALID_HANDLE                                  => UsbInvalidHandle,
                SEPIA2_ERR_USB_INVALID_DESCRIPTOR_BUFFER                       => UsbInvalidDescriptorBuffer,
                SEPIA2_ERR_USB_IOCTRL_FAILED                                   => UsbIoctrlFailed,
                SEPIA2_ERR_USB_VCMD_FAILED                                     => UsbVcmdFailed,
                SEPIA2_ERR_USB_NO_SUCH_PIPE                                    => UsbNoSuchPipe,
                SEPIA2_ERR_USB_REGISTER_NOTIFICATION_FAILED                    => UsbRegisterNotificationFailed,
                SEPIA2_ERR_USB_UNKNOWN_DEVICE                                  => UsbUnknownDevice,
                SEPIA2_ERR_USB_WRONG_DRIVER                                    => UsbWrongDriver,
                SEPIA2_ERR_USB_WINDOWS_ERROR                                   => UsbWindowsError,
                SEPIA2_ERR_USB_DEVICE_NOT_OPEN                                 => UsbDeviceNotOpen,
                SEPIA2_ERR_I2C_DEVICE_ERROR                                    => I2cDeviceError,
                SEPIA2_ERR_LMP1_ADC_TABLES_NOT_FOUND                           => Lmp1AdcTablesNotFound,
                SEPIA2_ERR_LMP1_ADC_OVERFLOW                                   => Lmp1AdcOverflow,
                SEPIA2_ERR_LMP1_ADC_UNDERFLOW                                  => Lmp1AdcUnderflow,

                SEPIA2_ERR_SCM_VOLTAGE_LIMITS_TABLE_NOT_FOUND                  => ScmVoltageLimitsTableNotFound,
                SEPIA2_ERR_SCM_VOLTAGE_SCALING_LIST_NOT_FOUND                  => ScmVoltageScalingListNotFound,
                SEPIA2_ERR_SCM_REPEATEDLY_MEASURED_VOLTAGE_FAILURE             => ScmRepeatedlyMeasuredVoltageFailure,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine0VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine1VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_2_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine2VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_3_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine3VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_4_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine4VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_5_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine5VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_6_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine6VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_7_VOLTAGE_TOO_LOW             => ScmPowerSupplyLine7VoltageTooLow,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine0VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine1VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_2_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine2VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_3_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine3VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_4_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine4VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_5_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine5VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_6_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine6VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_7_VOLTAGE_TOO_HIGH            => ScmPowerSupplyLine7VoltageTooHigh,
                SEPIA2_ERR_SCM_POWER_SUPPLY_LASER_TURNING_OFF_VOLTAGE_TOO_HIGH => ScmPowerSupplyLaserTurningOffVoltageTooHigh,
                SEPIA2_ERR_SCM_INVALID_TEMPERATURE_TABLE_COUNT                 => ScmInvalidTemperatureTableCount,
                SEPIA2_ERR_SCM_TCONFG_TABLE_READ_FAILED                        => ScmTconfgTableReadFailed,
                SEPIA2_ERR_SCM_INVALID_NUMBER_OF_TABLE_ENTRIES                 => ScmInvalidNumberOfTableEntries,
                SEPIA2_ERR_SCM_INVALID_TIMERTICK_VALUE                         => ScmInvalidTimertickValue,
                SEPIA2_ERR_SCM_INVALID_TEMPERATURE_VALUE_TABLE                 => ScmInvalidTemperatureValueTable,
                SEPIA2_ERR_SCM_INVALID_DAC_CONTROL_TABLE_A                     => ScmInvalidDacControlTableA,
                SEPIA2_ERR_SCM_INVALID_DAC_CONTROL_TABLE_B                     => ScmInvalidDacControlTableB,
                SEPIA2_ERR_SCM_TEMPERATURE_TABLE_READ_FAILED                   => ScmTemperatureTableReadFailed,

                SEPIA2_ERR_SOM_INT_OSCILLATOR_S_FREQ_LIST_NOT_FOUND            => SomIntOscillatorSFreqListNotFound,
                SEPIA2_ERR_SOM_TRIGGER_MODE_LIST_NOT_FOUND                     => SomTriggerModeListNotFound,
                SEPIA2_ERR_SOM_TRIGGER_LEVEL_NOT_FOUND                         => SomTriggerLevelNotFound,
                SEPIA2_ERR_SOM_PREDIVIDER_PRETRIGGER_OR_TRIGGERMASK_NOT_FOUND  => SomPredividerPretriggerOrTriggermaskNotFound,
                SEPIA2_ERR_SOM_BURSTLENGTH_NOT_FOUND                           => SomBurstlengthNotFound,
                SEPIA2_ERR_SOM_OUTPUT_AND_SYNC_ENABLE_NOT_FOUND                => SomOutputAndSyncEnableNotFound,
                SEPIA2_ERR_SOM_TRIGGER_LEVEL_OUT_OF_BOUNDS                     => SomTriggerLevelOutOfBounds,
                SEPIA2_ERR_SOM_ILLEGAL_FREQUENCY_TRIGGERMODE                   => SomIllegalFrequencyTriggermode,
                SEPIA2_ERR_SOM_ILLEGAL_FREQUENCY_DIVIDER                       => SomIllegalFrequencyDivider,
                SEPIA2_ERR_SOM_ILLEGAL_PRESYNC                                 => SomIllegalPresync,
                SEPIA2_ERR_SOM_ILLEGAL_BURST_LENGTH                            => SomIllegalBurstLength,
                SEPIA2_ERR_SOM_AUX_IO_CTRL_NOT_FOUND                           => SomAuxIoCtrlNotFound,
                SEPIA2_ERR_SOM_ILLEGAL_AUX_OUT_CTRL                            => SomIllegalAuxOutCtrl,
                SEPIA2_ERR_SOM_ILLEGAL_AUX_IN_CTRL                             => SomIllegalAuxInCtrl,
                SEPIA2_ERR_SOMD_INT_OSCILLATOR_S_FREQ_LIST_NOT_FOUND           => SomdIntOscillatorSFreqListNotFound,
                SEPIA2_ERR_SOMD_TRIGGER_MODE_LIST_NOT_FOUND                    => SomdTriggerModeListNotFound,
                SEPIA2_ERR_SOMD_TRIGGER_LEVEL_NOT_FOUND                        => SomdTriggerLevelNotFound,
                SEPIA2_ERR_SOMD_PREDIVIDER_PRETRIGGER_OR_TRIGGERMASK_NOT_FOUND => SomdPredividerPretriggerOrTriggermaskNotFound,
                SEPIA2_ERR_SOMD_BURSTLENGTH_NOT_FOUND                          => SomdBurstlengthNotFound,
                SEPIA2_ERR_SOMD_OUTPUT_AND_SYNC_ENABLE_NOT_FOUND               => SomdOutputAndSyncEnableNotFound,
                SEPIA2_ERR_SOMD_TRIGGER_LEVEL_OUT_OF_BOUNDS                    => SomdTriggerLevelOutOfBounds,
                SEPIA2_ERR_SOMD_ILLEGAL_FREQUENCY_TRIGGERMODE                  => SomdIllegalFrequencyTriggermode,
                SEPIA2_ERR_SOMD_ILLEGAL_FREQUENCY_DIVIDER                      => SomdIllegalFrequencyDivider,
                SEPIA2_ERR_SOMD_ILLEGAL_PRESYNC                                => SomdIllegalPresync,
                SEPIA2_ERR_SOMD_ILLEGAL_BURST_LENGTH                           => SomdIllegalBurstLength,
                SEPIA2_ERR_SOMD_AUX_IO_CTRL_NOT_FOUND                          => SomdAuxIoCtrlNotFound,
                SEPIA2_ERR_SOMD_ILLEGAL_AUX_OUT_CTRL                           => SomdIllegalAuxOutCtrl,
                SEPIA2_ERR_SOMD_ILLEGAL_AUX_IN_CTRL                            => SomdIllegalAuxInCtrl,
                SEPIA2_ERR_SOMD_ILLEGAL_OUT_MUX_CTRL                           => SomdIllegalOutMuxCtrl,
                SEPIA2_ERR_SOMD_OUTPUT_DELAY_DATA_NOT_FOUND                    => SomdOutputDelayDataNotFound,
                SEPIA2_ERR_SOMD_ILLEGAL_OUTPUT_DELAY_DATA                      => SomdIllegalOutputDelayData,
                SEPIA2_ERR_SOMD_DELAY_NOT_ALLOWED_IN_TRIGGER_MODE              => SomdDelayNotAllowedInTriggerMode,
                SEPIA2_ERR_SOMD_DEVICE_INITIALIZING                            => SomdDeviceInitializing,
                SEPIA2_ERR_SOMD_DEVICE_BUSY                                    => SomdDeviceBusy,
                SEPIA2_ERR_SOMD_PLL_NOT_LOCKED                                 => SomdPllNotLocked,
                SEPIA2_ERR_SOMD_FW_UPDATE_FAILED                               => SomdFwUpdateFailed,
                SEPIA2_ERR_SOMD_FW_CRC_CHECK_FAILED                            => SomdFwCrcCheckFailed,
                SEPIA2_ERR_SOMD_HW_TRIGGERSOURCE_ERROR                         => SomdHwTriggersourceError,
                SEPIA2_ERR_SOMD_HW_SYCHRONIZE_NOW_ERROR                        => SomdHwSychronizeNowError,
                SEPIA2_ERR_SOMD_HW_SYNC_RANGE_ERROR                            => SomdHwSyncRangeError,
                SEPIA2_ERR_SOMD_HW_ILLEGAL_OUT_MUX_CTRL                        => SomdHwIllegalOutMuxCtrl,
                SEPIA2_ERR_SOMD_HW_SET_DELAY_ERROR                             => SomdHwSetDelayError,
                SEPIA2_ERR_SOMD_HW_AUX_IO_COMMAND_ERROR                        => SomdHwAuxIoCommandError,
                SEPIA2_ERR_SOMD_HW_PLL_NOT_STABLE                              => SomdHwPllNotStable,
                SEPIA2_ERR_SOMD_HW_BURST_LENGTH_ERROR                          => SomdHwBurstLengthError,
                SEPIA2_ERR_SOMD_HW_OUT_MUX_COMMAND_ERROR                       => SomdHwOutMuxCommandError,
                SEPIA2_ERR_SOMD_HW_COARSE_DELAY_SET_ERROR                      => SomdHwCoarseDelaySetError,
                SEPIA2_ERR_SOMD_HW_FINE_DELAY_SET_ERROR                        => SomdHwFineDelaySetError,
                SEPIA2_ERR_SOMD_HW_FW_EPROM_ERROR                              => SomdHwFwEpromError,
                SEPIA2_ERR_SOMD_HW_CRC_ERROR_ON_WRITING_FIRMWARE               => SomdHwCrcErrorOnWritingFirmware,
                SEPIA2_ERR_SOMD_HW_CALIBRATION_DATA_NOT_FOUND                  => SomdHwCalibrationDataNotFound,
                SEPIA2_ERR_SOMD_HW_WRONG_EXTERNAL_FREQUENCY                    => SomdHwWrongExternalFrequency,
                SEPIA2_ERR_SOMD_HW_EXTERNAL_FREQUENCY_NOT_STABLE               => SomdHwExternalFrequencyNotStable,

                SEPIA2_ERR_SLM_ILLEGAL_FREQUENCY_TRIGGERMODE                   => SlmIllegalFrequencyTriggermode,
                SEPIA2_ERR_SLM_ILLEGAL_INTENSITY                               => SlmIllegalIntensity,
                SEPIA2_ERR_SLM_ILLEGAL_HEAD_TYPE                               => SlmIllegalHeadType,
                SEPIA2_ERR_SML_ILLEGAL_INTENSITY                               => SmlIllegalIntensity,
                SEPIA2_ERR_SML_POWER_SCALE_TABLES_NOT_FOUND                    => SmlPowerScaleTablesNotFound,
                SEPIA2_ERR_SML_ILLEGAL_HEAD_TYPE                               => SmlIllegalHeadType,
                SEPIA2_ERR_VUV_VIR_SCALING_TABLES_NOT_FOUND                    => VuvVirScalingTablesNotFound,
                SEPIA2_ERR_VUV_VIR_DEVICE_TYPE_NOT_FOUND                       => VuvVirDeviceTypeNotFound,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_TRIGGER_SOURCE_INDEX                => VuvVirIllegalTriggerSourceIndex,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_FREQUENCY_DIVIDER_INDEX             => VuvVirIllegalFrequencyDividerIndex,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_TRIGGER_LEVEL_VALUE                 => VuvVirIllegalTriggerLevelValue,
                SEPIA2_ERR_VUV_VIR_TRIGGER_DATA_NOT_FOUND                      => VuvVirTriggerDataNotFound,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_PUMP_REGISTER_READ_INDEX            => VuvVirIllegalPumpRegisterReadIndex,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_PUMP_REGISTER_WRITE_INDEX           => VuvVirIllegalPumpRegisterWriteIndex,
                SEPIA2_ERR_VUV_VIR_INTENSITY_DATA_NOT_FOUND                    => VuvVirIntensityDataNotFound,
                SEPIA2_ERR_VUV_VIR_ILLEGAL_INTENSITY_DATA                      => VuvVirIllegalIntensityData,
                SEPIA2_ERR_VUV_VIR_UNSUPPORTED_OPTION                          => VuvVirUnsupportedOption,
                SEPIA2_ERR_PRI_UI_CONSTANTS_TABLES_NOT_FOUND                   => PriUiConstantsTablesNotFound,
                SEPIA2_ERR_PRI_WAVELENGTHS_TABLE_NOT_FOUND                     => PriWavelengthsTableNotFound,
                SEPIA2_ERR_PRI_ILLEGAL_WAVELENGTH_INDEX                        => PriIllegalWavelengthIndex,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_WAVELENGTH_INDEX               => PriErrorOnWritingWavelengthIndex,
                SEPIA2_ERR_PRI_OPERATION_MODE_TEXTS_NOT_FOUND                  => PriOperationModeTextsNotFound,
                SEPIA2_ERR_PRI_OPERATION_MODE_COMMANDS_NOT_FOUND               => PriOperationModeCommandsNotFound,
                SEPIA2_ERR_PRI_ILLEGAL_OPERATION_MODE_INDEX                    => PriIllegalOperationModeIndex,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_OPERATION_MODE_INDEX           => PriErrorOnWritingOperationModeIndex,
                SEPIA2_ERR_PRI_TRIGGER_SOURCE_TEXTS_NOT_FOUND                  => PriTriggerSourceTextsNotFound,
                SEPIA2_ERR_PRI_TRIGGER_SOURCE_COMMANDS_NOT_FOUND               => PriTriggerSourceCommandsNotFound,
                SEPIA2_ERR_PRI_ILLEGAL_TRIGGER_SOURCE_INDEX                    => PriIllegalTriggerSourceIndex,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_TRIGGER_SOURCE_INDEX           => PriErrorOnWritingTriggerSourceIndex,
                SEPIA2_ERR_PRI_ILLEGAL_TRIGGER_LEVEL                           => PriIllegalTriggerLevel,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_TRIGGER_LEVEL                  => PriErrorOnWritingTriggerLevel,
                SEPIA2_ERR_PRI_ILLEGAL_INTENSITY_DATA                          => PriIllegalIntensityData,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_INTENSITY_DATA                 => PriErrorOnWritingIntensityData,
                SEPIA2_ERR_PRI_ILLEGAL_FREQUENCY_DATA                          => PriIllegalFrequencyData,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_FREQUENCY_DATA                 => PriErrorOnWritingFrequencyData,
                SEPIA2_ERR_PRI_ILLEGAL_GATING_DATA                             => PriIllegalGatingData,
                SEPIA2_ERR_PRI_ERROR_ON_WRITING_GATING_DATA                    => PriErrorOnWritingGatingData,
                SEPIA2_ERR_SWM_CALTABLES_NOT_FOUND                             => SwmCaltablesNotFound,
                SEPIA2_ERR_SWM_ILLEGAL_CURVE_INDEX                             => SwmIllegalCurveIndex,
                SEPIA2_ERR_SWM_ILLEGAL_TIMEBASE_RANGE_INDEX                    => SwmIllegalTimebaseRangeIndex,
                SEPIA2_ERR_SWM_ILLEGAL_PULSE_AMPLITUDE                         => SwmIllegalPulseAmplitude,
                SEPIA2_ERR_SWM_ILLEGAL_RAMP_SLEW_RATE                          => SwmIllegalRampSlewRate,
                SEPIA2_ERR_SWM_ILLEGAL_PULSE_START_DELAY                       => SwmIllegalPulseStartDelay,
                SEPIA2_ERR_SWM_ILLEGAL_RAMP_START_DELAY                        => SwmIllegalRampStartDelay,
                SEPIA2_ERR_SWM_ILLEGAL_WAVE_STOP_DELAY                         => SwmIllegalWaveStopDelay,
                SEPIA2_ERR_SWM_ILLEGAL_TABLENAME                               => SwmIllegalTablename,
                SEPIA2_ERR_SWM_ILLEGAL_TABLE_INDEX                             => SwmIllegalTableIndex,
                SEPIA2_ERR_SWM_ILLEGAL_TABLE_FIELD                             => SwmIllegalTableField,
                SEPIA2_ERR_SWM_EXT_ATTENUATION_NOT_FOUND                       => SwmExtAttenuationNotFound,
                SEPIA2_ERR_SWM_ILLEGAL_ATTENUATION_VALUE                       => SwmIllegalAttenuationValue,
                SEPIA2_ERR_VCL_UI_CONSTANTS_NOT_FOUND                          => VclUiConstantsNotFound,
                SEPIA2_ERR_VCL_TEMPERATURE_CALTABLE_NOT_FOUND                  => VclTemperatureCaltableNotFound,
                SEPIA2_ERR_VCL_BIAS_VOLTAGE_CALTABLE_NOT_FOUND                 => VclBiasVoltageCaltableNotFound,
                SEPIA2_ERR_VCL_ILLEGAL_TEMPERATURE                             => VclIllegalTemperature,
                SEPIA2_ERR_VCL_ILLEGAL_BIAS_VOLTAGE                            => VclIllegalBiasVoltage,

                SEPIA2_ERR_SPM_ILLEGAL_INPUT_VALUE                             => SpmIllegalInputValue,
                SEPIA2_ERR_SPM_VALUE_OUT_OF_BOUNDS                             => SpmValueOutOfBounds,
                SEPIA2_ERR_SPM_FW_OUT_OF_MEMORY                                => SpmFwOutOfMemory,
                SEPIA2_ERR_SPM_FW_UPDATE_FAILED                                => SpmFwUpdateFailed,
                SEPIA2_ERR_SPM_FW_CRC_CHECK_FAILED                             => SpmFwCrcCheckFailed,
                SEPIA2_ERR_SPM_FW_FLASH_DELETION_FAILED                        => SpmFwFlashDeletionFailed,
                SEPIA2_ERR_SPM_FW_FUNCTION_NOT_IMPLEMENTED                     => SpmFwFunctionNotImplemented,
                SEPIA2_ERR_SPM_FW_FILE_OPEN_ERROR                              => SpmFwFileOpenError,
                SEPIA2_ERR_SPM_FW_FILE_READ_ERROR                              => SpmFwFileReadError,
                SEPIA2_ERR_SSM_SCALING_TABLES_NOT_FOUND                        => SsmScalingTablesNotFound,
                SEPIA2_ERR_SSM_ILLEGAL_TRIGGER_MODE                            => SsmIllegalTriggerMode,
                SEPIA2_ERR_SSM_ILLEGAL_TRIGGER_LEVEL_VALUE                     => SsmIllegalTriggerLevelValue,
                SEPIA2_ERR_SSM_ILLEGAL_CORRECTION_VALUE                        => SsmIllegalCorrectionValue,
                SEPIA2_ERR_SSM_TRIGGER_DATA_NOT_FOUND                          => SsmTriggerDataNotFound,
                SEPIA2_ERR_SSM_CORRECTION_DATA_COMMAND_NOT_FOUND               => SsmCorrectionDataCommandNotFound,
                SEPIA2_ERR_SWS_SCALING_TABLES_NOT_FOUND                        => SwsScalingTablesNotFound,
                SEPIA2_ERR_SWS_ILLEGAL_HW_MODULETYPE                           => SwsIllegalHwModuletype,
                SEPIA2_ERR_SWS_MODULE_NOT_FUNCTIONAL                           => SwsModuleNotFunctional,
                SEPIA2_ERR_SWS_ILLEGAL_CENTER_WAVELENGTH                       => SwsIllegalCenterWavelength,
                SEPIA2_ERR_SWS_ILLEGAL_BANDWIDTH                               => SwsIllegalBandwidth,
                SEPIA2_ERR_SWS_VALUE_OUT_OF_BOUNDS                             => SwsValueOutOfBounds,
                SEPIA2_ERR_SWS_MODULE_BUSY                                     => SwsModuleBusy,
                SEPIA2_ERR_SWS_FW_WRONG_COMPONENT_ANSWERING                    => SwsFwWrongComponentAnswering,
                SEPIA2_ERR_SWS_FW_UNKNOWN_HW_MODULETYPE                        => SwsFwUnknownHwModuletype,
                SEPIA2_ERR_SWS_FW_OUT_OF_MEMORY                                => SwsFwOutOfMemory,
                SEPIA2_ERR_SWS_FW_VERSION_CONFLICT                             => SwsFwVersionConflict,
                SEPIA2_ERR_SWS_FW_UPDATE_FAILED                                => SwsFwUpdateFailed,
                SEPIA2_ERR_SWS_FW_CRC_CHECK_FAILED                             => SwsFwCrcCheckFailed,
                SEPIA2_ERR_SWS_FW_ERROR_ON_FLASH_DELETION                      => SwsFwErrorOnFlashDeletion,
                SEPIA2_ERR_SWS_FW_CALIBRATION_MODE_ERROR                       => SwsFwCalibrationModeError,
                SEPIA2_ERR_SWS_FW_FUNCTION_NOT_IMPLEMENTED                     => SwsFwFunctionNotImplemented,
                SEPIA2_ERR_SWS_FW_WRONG_CALTABLE_ENTRY                         => SwsFwWrongCaltableEntry,
                SEPIA2_ERR_SWS_FW_INSUFFICIENT_CALTABLE_SIZE                   => SwsFwInsufficientCaltableSize,
                SEPIA2_ERR_SWS_FW_FILE_OPEN_ERROR                              => SwsFwFileOpenError,
                SEPIA2_ERR_SWS_FW_FILE_READ_ERROR                              => SwsFwFileReadError,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_INIT_TIMEOUT             => SwsHwModule0AllMotorsInitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_PLAUSI_CHECK             => SwsHwModule0AllMotorsPlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_DAC_SET_CURRENT          => SwsHwModule0AllMotorsDacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_TIMEOUT                  => SwsHwModule0AllMotorsTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_FLASH_WRITE_ERROR        => SwsHwModule0AllMotorsFlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_0_ALL_MOTORS_OUT_OF_BOUNDS            => SwsHwModule0AllMotorsOutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_0_I2C_FAILURE                         => SwsHwModule0I2cFailure,
                SEPIA2_ERR_SWS_HW_MODULE_0_INIT_FAILURE                        => SwsHwModule0InitFailure,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_DATA_NOT_FOUND              => SwsHwModule0Motor1DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_INIT_TIMEOUT                => SwsHwModule0Motor1InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_PLAUSI_CHECK                => SwsHwModule0Motor1PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_DAC_SET_CURRENT             => SwsHwModule0Motor1DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_TIMEOUT                     => SwsHwModule0Motor1Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_FLASH_WRITE_ERROR           => SwsHwModule0Motor1FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_1_OUT_OF_BOUNDS               => SwsHwModule0Motor1OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_DATA_NOT_FOUND              => SwsHwModule0Motor2DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_INIT_TIMEOUT                => SwsHwModule0Motor2InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_PLAUSI_CHECK                => SwsHwModule0Motor2PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_DAC_SET_CURRENT             => SwsHwModule0Motor2DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_TIMEOUT                     => SwsHwModule0Motor2Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_FLASH_WRITE_ERROR           => SwsHwModule0Motor2FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_2_OUT_OF_BOUNDS               => SwsHwModule0Motor2OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_DATA_NOT_FOUND              => SwsHwModule0Motor3DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_INIT_TIMEOUT                => SwsHwModule0Motor3InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_PLAUSI_CHECK                => SwsHwModule0Motor3PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_DAC_SET_CURRENT             => SwsHwModule0Motor3DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_TIMEOUT                     => SwsHwModule0Motor3Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_FLASH_WRITE_ERROR           => SwsHwModule0Motor3FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_0_MOTOR_3_OUT_OF_BOUNDS               => SwsHwModule0Motor3OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_INIT_TIMEOUT             => SwsHwModule1AllMotorsInitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_PLAUSI_CHECK             => SwsHwModule1AllMotorsPlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_DAC_SET_CURRENT          => SwsHwModule1AllMotorsDacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_TIMEOUT                  => SwsHwModule1AllMotorsTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_FLASH_WRITE_ERROR        => SwsHwModule1AllMotorsFlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_1_ALL_MOTORS_OUT_OF_BOUNDS            => SwsHwModule1AllMotorsOutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_1_I2C_FAILURE                         => SwsHwModule1I2cFailure,
                SEPIA2_ERR_SWS_HW_MODULE_1_INIT_FAILURE                        => SwsHwModule1InitFailure,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_DATA_NOT_FOUND              => SwsHwModule1Motor1DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_INIT_TIMEOUT                => SwsHwModule1Motor1InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_PLAUSI_CHECK                => SwsHwModule1Motor1PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_DAC_SET_CURRENT             => SwsHwModule1Motor1DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_TIMEOUT                     => SwsHwModule1Motor1Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_FLASH_WRITE_ERROR           => SwsHwModule1Motor1FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_1_OUT_OF_BOUNDS               => SwsHwModule1Motor1OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_DATA_NOT_FOUND              => SwsHwModule1Motor2DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_INIT_TIMEOUT                => SwsHwModule1Motor2InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_PLAUSI_CHECK                => SwsHwModule1Motor2PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_DAC_SET_CURRENT             => SwsHwModule1Motor2DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_TIMEOUT                     => SwsHwModule1Motor2Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_FLASH_WRITE_ERROR           => SwsHwModule1Motor2FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_2_OUT_OF_BOUNDS               => SwsHwModule1Motor2OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_DATA_NOT_FOUND              => SwsHwModule1Motor3DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_INIT_TIMEOUT                => SwsHwModule1Motor3InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_PLAUSI_CHECK                => SwsHwModule1Motor3PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_DAC_SET_CURRENT             => SwsHwModule1Motor3DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_TIMEOUT                     => SwsHwModule1Motor3Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_FLASH_WRITE_ERROR           => SwsHwModule1Motor3FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_1_MOTOR_3_OUT_OF_BOUNDS               => SwsHwModule1Motor3OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_INIT_TIMEOUT             => SwsHwModule2AllMotorsInitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_PLAUSI_CHECK             => SwsHwModule2AllMotorsPlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_DAC_SET_CURRENT          => SwsHwModule2AllMotorsDacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_TIMEOUT                  => SwsHwModule2AllMotorsTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_FLASH_WRITE_ERROR        => SwsHwModule2AllMotorsFlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_2_ALL_MOTORS_OUT_OF_BOUNDS            => SwsHwModule2AllMotorsOutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_2_I2C_FAILURE                         => SwsHwModule2I2cFailure,
                SEPIA2_ERR_SWS_HW_MODULE_2_INIT_FAILURE                        => SwsHwModule2InitFailure,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_DATA_NOT_FOUND              => SwsHwModule2Motor1DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_INIT_TIMEOUT                => SwsHwModule2Motor1InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_PLAUSI_CHECK                => SwsHwModule2Motor1PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_DAC_SET_CURRENT             => SwsHwModule2Motor1DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_TIMEOUT                     => SwsHwModule2Motor1Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_FLASH_WRITE_ERROR           => SwsHwModule2Motor1FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_1_OUT_OF_BOUNDS               => SwsHwModule2Motor1OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_DATA_NOT_FOUND              => SwsHwModule2Motor2DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_INIT_TIMEOUT                => SwsHwModule2Motor2InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_PLAUSI_CHECK                => SwsHwModule2Motor2PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_DAC_SET_CURRENT             => SwsHwModule2Motor2DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_TIMEOUT                     => SwsHwModule2Motor2Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_FLASH_WRITE_ERROR           => SwsHwModule2Motor2FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_2_OUT_OF_BOUNDS               => SwsHwModule2Motor2OutOfBounds,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_DATA_NOT_FOUND              => SwsHwModule2Motor3DataNotFound,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_INIT_TIMEOUT                => SwsHwModule2Motor3InitTimeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_PLAUSI_CHECK                => SwsHwModule2Motor3PlausiCheck,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_DAC_SET_CURRENT             => SwsHwModule2Motor3DacSetCurrent,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_TIMEOUT                     => SwsHwModule2Motor3Timeout,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_FLASH_WRITE_ERROR           => SwsHwModule2Motor3FlashWriteError,
                SEPIA2_ERR_SWS_HW_MODULE_2_MOTOR_3_OUT_OF_BOUNDS               => SwsHwModule2Motor3OutOfBounds,

                SEPIA2_ERR_LIB_TOO_MANY_USB_HANDLES                            => LibTooManyUsbHandles,
                SEPIA2_ERR_LIB_ILLEGAL_DEVICE_INDEX                            => LibIllegalDeviceIndex,
                SEPIA2_ERR_LIB_USB_DEVICE_OPEN_ERROR                           => LibUsbDeviceOpenError,
                SEPIA2_ERR_LIB_USB_DEVICE_BUSY_OR_BLOCKED                      => LibUsbDeviceBusyOrBlocked,
                SEPIA2_ERR_LIB_USB_DEVICE_ALREADY_OPENED                       => LibUsbDeviceAlreadyOpened,
                SEPIA2_ERR_LIB_UNKNOWN_USB_HANDLE                              => LibUnknownUsbHandle,
                SEPIA2_ERR_LIB_SCM_828_MODULE_NOT_FOUND                        => LibScm828ModuleNotFound,
                SEPIA2_ERR_LIB_ILLEGAL_SLOT_NUMBER                             => LibIllegalSlotNumber,
                SEPIA2_ERR_LIB_REFERENCED_SLOT_IS_NOT_IN_USE                   => LibReferencedSlotIsNotInUse,
                SEPIA2_ERR_LIB_THIS_IS_NO_SCM_828_MODULE                       => LibThisIsNoScm828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_SOM_828_MODULE                       => LibThisIsNoSom828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_SLM_828_MODULE                       => LibThisIsNoSlm828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_SML_828_MODULE                       => LibThisIsNoSml828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_SWM_828_MODULE                       => LibThisIsNoSwm828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_SSM_MODULE                           => LibThisIsNoSsmModule,
                SEPIA2_ERR_LIB_THIS_IS_NO_SWS_MODULE                           => LibThisIsNoSwsModule,
                SEPIA2_ERR_LIB_THIS_IS_NO_SPM_MODULE                           => LibThisIsNoSpmModule,
                SEPIA2_ERR_LIB_THIS_IS_NO_LMP1                                 => LibThisIsNoLmp1,
                SEPIA2_ERR_LIB_THIS_IS_NO_SOM_828_D_MODULE                     => LibThisIsNoSom828DModule,
                SEPIA2_ERR_LIB_NO_MAP_FOUND                                    => LibNoMapFound,
                SEPIA2_ERR_LIB_THIS_IS_NO_LMP8                                 => LibThisIsNoLmp8,
                SEPIA2_ERR_LIB_THIS_IS_NO_VCL_828_MODULE                       => LibThisIsNoVcl828Module,
                SEPIA2_ERR_LIB_THIS_IS_NO_VUV_NOR_VIR_MODULE                   => LibThisIsNoVuvNorVirModule,
                SEPIA2_ERR_LIB_THIS_IS_NO_PRI_MODULE                           => LibThisIsNoPriModule,
                SEPIA2_ERR_LIB_DEVICE_CHANGED_RE_INITIALISE_USB_DEVICE_LIST    => LibDeviceChangedReInitialiseUsbDeviceList,
                SEPIA2_ERR_LIB_INAPPROPRIATE_USB_DEVICE                        => LibInappropriateUsbDevice,
                SEPIA2_ERR_LIB_WRONG_USB_DRIVER_VERSION                        => LibWrongUsbDriverVersion,
                SEPIA2_ERR_LIB_UNKNOWN_FUNCTION                                => LibUnknownFunction,
                SEPIA2_ERR_LIB_ILLEGAL_PARAMETER_ON_FUNCTION_CALL              => LibIllegalParameterOnFunctionCall,
                SEPIA2_ERR_LIB_UNKNOWN_ERROR_CODE                              => LibUnknownErrorCode,
                _ => LibUnknownErrorCode,
            };
            Err(sepia2_error)
        }
    }
    pub fn as_raw(self) -> i32 {
        self as i32
    }
}

impl fmt::Display for Sepia2Error {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        use Sepia2Error::*;
        let description = match self {
            FwMemoryAllocationError                       => "FW: memory allocation error",
            FwCrcErrorWhileCheckingScm828Module           => "FW: CRC error while checking SCM 828 module",
            FwCrcErrorWhileCheckingBackplane              => "FW: CRC error while checking backplane",
            FwCrcErrorWhileCheckingModule                 => "FW: CRC error while checking module",
            FwMapsizeError                                => "FW: mapsize error",
            FwUnknownErrorPhase                           => "FW: unknown error phase",
            FwInsufficientFwVersion                       => "FW: insufficient FW version",
            FwWrongWorkingmode                            => "FW: wrong workingmode",
            FwIllegalModuleChange                         => "FW: illegal module change",

            UsbWrongDriverVersion                         => "USB: wrong driver version",
            UsbOpenDeviceError                            => "USB: open device error",
            UsbDeviceBusy                                 => "USB: device busy",
            UsbCloseDeviceError                           => "USB: close device error",
            UsbDeviceChanged                              => "USB: device changed",
            I2cAddressError                               => "I2C: address error",
            UsbDeviceIndexError                           => "USB: device index error",
            I2cIllegalMultiplexerPath                     => "I2C: illegal multiplexer path",
            I2cIllegalMultiplexerLevel                    => "I2C: illegal multiplexer level",
            I2cIllegalSlotId                              => "I2C: illegal slot id",
            FramNoUptimeCounter                           => "FRAM: no uptime counter",
            FramBlockwriteError                           => "FRAM: blockwrite error",
            FramBlockreadError                            => "FRAM: blockread error",
            FramCrcBlockcheckError                        => "FRAM: CRC blockcheck error",
            RamBlockAllocationError                       => "RAM: block allocation error",
            RamSecureMemoryHandlingError                  => "RAM: secure memory handling error",
            I2cInitialisingCommandExecutionError          => "I2C: initialising command execution error",
            I2cFetchingInitialisingCommandsError          => "I2C: fetching initialising commands error",
            I2cWritingInitialisingCommandsError           => "I2C: writing initialising commands error",
            I2cModuleCalibratingError                     => "I2C: module calibrating error",
            I2cFetchingCalibratingCommandsError           => "I2C: fetching calibrating commands error",
            I2cWritingCalibratingCommandsError            => "I2C: writing calibrating commands error",
            DclFileOpenError                              => "DCL: file open error",
            DclWrongFileLength                            => "DCL: wrong file length",
            DclFileReadError                              => "DCL: file read error",
            FramIsWriteProtected                          => "FRAM: is write protected",
            DclFileSpecifiesDifferentModuletype           => "DCL: file specifies different moduletype",
            DclFileSpecifiesDifferentSerialNumber         => "DCL: file specifies different serial number",

            I2cInvalidArgument                            => "I2C: invalid argument",
            I2cNoAcknowledgeOnWriteAdressbyte             => "I2C: no acknowledge on write adressbyte",
            I2cNoAcknowledgeOnReadAdressbyte              => "I2C: no acknowledge on read adressbyte",
            I2cNoAcknowledgeOnWriteDatabyte               => "I2C: no acknowledge on write databyte",
            I2cReadBackError                              => "I2C: read back error",
            I2cReadError                                  => "I2C: read error",
            I2cWriteError                                 => "I2C: write error",
            IOFileError                                   => "I/O: file error",
            I2cMultiplexerError                           => "I2C: multiplexer error",
            I2cMultiplexerPathError                       => "I2C: multiplexer path error",
            UsbInitFailed                                 => "USB: init failed",
            UsbInvalidArgument                            => "USB: invalid argument",
            UsbDeviceStillOpen                            => "USB: device still open",
            UsbNoMemory                                   => "USB: no memory",
            UsbOpenFailed                                 => "USB: open failed",
            UsbGetDescriptorFailed                        => "USB: get descriptor failed",
            UsbInappropriateDevice                        => "USB: inappropriate device",
            UsbBusyDevice                                 => "USB: busy device",
            UsbInvalidHandle                              => "USB: invalid handle",
            UsbInvalidDescriptorBuffer                    => "USB: invalid descriptor buffer",
            UsbIoctrlFailed                               => "USB: IOCTRL failed",
            UsbVcmdFailed                                 => "USB: vcmd failed",
            UsbNoSuchPipe                                 => "USB: no such pipe",
            UsbRegisterNotificationFailed                 => "USB: register notification failed",
            UsbUnknownDevice                              => "USB: unknown device",
            UsbWrongDriver                                => "USB: wrong driver",
            UsbWindowsError                               => "USB: windows error",
            UsbDeviceNotOpen                              => "USB: device not open",
            I2cDeviceError                                => "I2C: device error",
            Lmp1AdcTablesNotFound                         => "LMP1: ADC tables not found",
            Lmp1AdcOverflow                               => "LMP1: ADC overflow",
            Lmp1AdcUnderflow                              => "LMP1: ADC underflow",

            ScmVoltageLimitsTableNotFound                 => "SCM: voltage limits table not found",
            ScmVoltageScalingListNotFound                 => "SCM: voltage scaling list not found",
            ScmRepeatedlyMeasuredVoltageFailure           => "SCM: repeatedly measured voltage failure",
            ScmPowerSupplyLine0VoltageTooLow              => "SCM: power supply line 0: voltage too low",
            ScmPowerSupplyLine1VoltageTooLow              => "SCM: power supply line 1: voltage too low",
            ScmPowerSupplyLine2VoltageTooLow              => "SCM: power supply line 2: voltage too low",
            ScmPowerSupplyLine3VoltageTooLow              => "SCM: power supply line 3: voltage too low",
            ScmPowerSupplyLine4VoltageTooLow              => "SCM: power supply line 4: voltage too low",
            ScmPowerSupplyLine5VoltageTooLow              => "SCM: power supply line 5: voltage too low",
            ScmPowerSupplyLine6VoltageTooLow              => "SCM: power supply line 6: voltage too low",
            ScmPowerSupplyLine7VoltageTooLow              => "SCM: power supply line 7: voltage too low",
            ScmPowerSupplyLine0VoltageTooHigh             => "SCM: power supply line 0: voltage too high",
            ScmPowerSupplyLine1VoltageTooHigh             => "SCM: power supply line 1: voltage too high",
            ScmPowerSupplyLine2VoltageTooHigh             => "SCM: power supply line 2: voltage too high",
            ScmPowerSupplyLine3VoltageTooHigh             => "SCM: power supply line 3: voltage too high",
            ScmPowerSupplyLine4VoltageTooHigh             => "SCM: power supply line 4: voltage too high",
            ScmPowerSupplyLine5VoltageTooHigh             => "SCM: power supply line 5: voltage too high",
            ScmPowerSupplyLine6VoltageTooHigh             => "SCM: power supply line 6: voltage too high",
            ScmPowerSupplyLine7VoltageTooHigh             => "SCM: power supply line 7: voltage too high",
            ScmPowerSupplyLaserTurningOffVoltageTooHigh   => "SCM: power supply laser turning-off-voltage too high",
            ScmInvalidTemperatureTableCount               => "SCM: invalid temperature table count",
            ScmTconfgTableReadFailed                      => "SCM: tconfg table read failed",
            ScmInvalidNumberOfTableEntries                => "SCM: invalid number of table entries",
            ScmInvalidTimertickValue                      => "SCM: invalid timertick value",
            ScmInvalidTemperatureValueTable               => "SCM: invalid temperature value table",
            ScmInvalidDacControlTableA                    => "SCM: invalid DAC control table A",
            ScmInvalidDacControlTableB                    => "SCM: invalid DAC control table B",
            ScmTemperatureTableReadFailed                 => "SCM: temperature table read failed",

            SomIntOscillatorSFreqListNotFound             => "SOM: int. oscillator's freq.-list not found",
            SomTriggerModeListNotFound                    => "SOM: trigger mode list not found",
            SomTriggerLevelNotFound                       => "SOM: trigger level not found",
            SomPredividerPretriggerOrTriggermaskNotFound  => "SOM: predivider, pretrigger or triggermask not found",
            SomBurstlengthNotFound                        => "SOM: burstlength not found",
            SomOutputAndSyncEnableNotFound                => "SOM: output and sync enable not found",
            SomTriggerLevelOutOfBounds                    => "SOM: trigger level out of bounds",
            SomIllegalFrequencyTriggermode                => "SOM: illegal frequency / triggermode",
            SomIllegalFrequencyDivider                    => "SOM: illegal frequency divider",
            SomIllegalPresync                             => "SOM: illegal presync (greater than divider)",
            SomIllegalBurstLength                         => "SOM: illegal burst length (>/= 2^24 or < 0)",
            SomAuxIoCtrlNotFound                          => "SOM: AUX I/O control data not found",
            SomIllegalAuxOutCtrl                          => "SOM: illegal AUX output control data",
            SomIllegalAuxInCtrl                           => "SOM: illegal AUX input control data",
            SomdIntOscillatorSFreqListNotFound            => "SOMD: int. oscillator's freq.-list not found",
            SomdTriggerModeListNotFound                   => "SOMD: trigger mode list not found",
            SomdTriggerLevelNotFound                      => "SOMD: trigger level not found",
            SomdPredividerPretriggerOrTriggermaskNotFound => "SOMD: predivider, pretrigger or triggermask not found",
            SomdBurstlengthNotFound                       => "SOMD: burstlength not found",
            SomdOutputAndSyncEnableNotFound               => "SOMD: output and sync enable not found",
            SomdTriggerLevelOutOfBounds                   => "SOMD: trigger level out of bounds",
            SomdIllegalFrequencyTriggermode               => "SOMD: illegal frequency / triggermode",
            SomdIllegalFrequencyDivider                   => "SOMD: illegal frequency divider",
            SomdIllegalPresync                            => "SOMD: illegal presync (greater than divider)",
            SomdIllegalBurstLength                        => "SOMD: illegal burst length (>/= 2^24 or < 0)",
            SomdAuxIoCtrlNotFound                         => "SOMD: AUX I/O control data not found",
            SomdIllegalAuxOutCtrl                         => "SOMD: illegal AUX output control data",
            SomdIllegalAuxInCtrl                          => "SOMD: illegal AUX input control data",
            SomdIllegalOutMuxCtrl                         => "SOMD: illegal output multiplexer control data",
            SomdOutputDelayDataNotFound                   => "SOMD: output delay data not found",
            SomdIllegalOutputDelayData                    => "SOMD: illegal output delay data",
            SomdDelayNotAllowedInTriggerMode              => "SOMD: delay not allowed in current trigger mode",
            SomdDeviceInitializing                        => "SOMD: device initializing",
            SomdDeviceBusy                                => "SOMD: device busy",
            SomdPllNotLocked                              => "SOMD: PLL not locked",
            SomdFwUpdateFailed                            => "SOMD: firmware update failed",
            SomdFwCrcCheckFailed                          => "SOMD: firmware CRC check failed",
            SomdHwTriggersourceError                      => "SOMD HW: triggersource error",
            SomdHwSychronizeNowError                      => "SOMD HW: sychronize now error",
            SomdHwSyncRangeError                          => "SOMD HW: SYNC range error",
            SomdHwIllegalOutMuxCtrl                       => "SOMD HW: illegal output multiplexer control data",
            SomdHwSetDelayError                           => "SOMD HW: set delay error",
            SomdHwAuxIoCommandError                       => "SOMD HW: AUX I/O command error",
            SomdHwPllNotStable                            => "SOMD HW: PLL not stable",
            SomdHwBurstLengthError                        => "SOMD HW: burst length error",
            SomdHwOutMuxCommandError                      => "SOMD HW: output multiplexer command error",
            SomdHwCoarseDelaySetError                     => "SOMD HW: coarse delay set error",
            SomdHwFineDelaySetError                       => "SOMD HW: fine delay set error",
            SomdHwFwEpromError                            => "SOMD HW: firmware EPROM error",
            SomdHwCrcErrorOnWritingFirmware               => "SOMD HW: CRC error on writing firmware",
            SomdHwCalibrationDataNotFound                 => "SOMD HW: calibration data not found",
            SomdHwWrongExternalFrequency                  => "SOMD HW: wrong external frequency",
            SomdHwExternalFrequencyNotStable              => "SOMD HW: external frequency not stable",

            SlmIllegalFrequencyTriggermode                => "SLM: illegal frequency / triggermode",
            SlmIllegalIntensity                           => "SLM: illegal intensity (> 100% or < 0%)",
            SlmIllegalHeadType                            => "SLM: illegal head type",
            SmlIllegalIntensity                           => "SML: illegal intensity (> 100% or < 0%)",
            SmlPowerScaleTablesNotFound                   => "SML: power scale tables not found",
            SmlIllegalHeadType                            => "SML: illegal head type",
            VuvVirScalingTablesNotFound                   => "VUV/VIR: scaling tables not found",
            VuvVirDeviceTypeNotFound                      => "VUV/VIR: device type not found",
            VuvVirIllegalTriggerSourceIndex               => "VUV/VIR: illegal trigger source index",
            VuvVirIllegalFrequencyDividerIndex            => "VUV/VIR: illegal frequency divider index",
            VuvVirIllegalTriggerLevelValue                => "VUV/VIR: illegal trigger level value",
            VuvVirTriggerDataNotFound                     => "VUV/VIR: trigger data not found",
            VuvVirIllegalPumpRegisterReadIndex            => "VUV/VIR: illegal pump register read index",
            VuvVirIllegalPumpRegisterWriteIndex           => "VUV/VIR: illegal pump register write index",
            VuvVirIntensityDataNotFound                   => "VUV/VIR: intensity data not found",
            VuvVirIllegalIntensityData                    => "VUV/VIR: illegal intensity data",
            VuvVirUnsupportedOption                       => "VUV/VIR: unsupported option",
            PriUiConstantsTablesNotFound                  => "PRI: UI-constants tables not found",
            PriWavelengthsTableNotFound                   => "PRI: wavelengths table not found",
            PriIllegalWavelengthIndex                     => "PRI: illegal wavelength index",
            PriErrorOnWritingWavelengthIndex              => "PRI: error on writing wavelength index",
            PriOperationModeTextsNotFound                 => "PRI: operation mode texts not found",
            PriOperationModeCommandsNotFound              => "PRI: operation mode commands not found",
            PriIllegalOperationModeIndex                  => "PRI: illegal operation mode index",
            PriErrorOnWritingOperationModeIndex           => "PRI: error on writing operation mode index",
            PriTriggerSourceTextsNotFound                 => "PRI: trigger source texts not found",
            PriTriggerSourceCommandsNotFound              => "PRI: trigger source commands not found",
            PriIllegalTriggerSourceIndex                  => "PRI: illegal trigger source index",
            PriErrorOnWritingTriggerSourceIndex           => "PRI: error on writing trigger source index",
            PriIllegalTriggerLevel                        => "PRI: illegal trigger level",
            PriErrorOnWritingTriggerLevel                 => "PRI: error on writing trigger level",
            PriIllegalIntensityData                       => "PRI: illegal intensity data",
            PriErrorOnWritingIntensityData                => "PRI: error on writing intensity data",
            PriIllegalFrequencyData                       => "PRI: illegal frequency data",
            PriErrorOnWritingFrequencyData                => "PRI: error on writing frequency data",
            PriIllegalGatingData                          => "PRI: illegal gating data",
            PriErrorOnWritingGatingData                   => "PRI: error on writing gating data",
            SwmCaltablesNotFound                          => "SWM: calibration tables not found",
            SwmIllegalCurveIndex                          => "SWM: illegal curve index",
            SwmIllegalTimebaseRangeIndex                  => "SWM: illegal timebase range index",
            SwmIllegalPulseAmplitude                      => "SWM: illegal pulse amplitude",
            SwmIllegalRampSlewRate                        => "SWM: illegal ramp slew rate",
            SwmIllegalPulseStartDelay                     => "SWM: illegal pulse start delay",
            SwmIllegalRampStartDelay                      => "SWM: illegal ramp start delay",
            SwmIllegalWaveStopDelay                       => "SWM: illegal wave stop delay",
            SwmIllegalTablename                           => "SWM: illegal tablename",
            SwmIllegalTableIndex                          => "SWM: illegal table index",
            SwmIllegalTableField                          => "SWM: illegal table field",
            SwmExtAttenuationNotFound                     => "SWM: ext. attenuation not found",
            SwmIllegalAttenuationValue                    => "SWM: illegal attenuation value",
            VclUiConstantsNotFound                        => "VCL: UI-constants not found",
            VclTemperatureCaltableNotFound                => "VCL: temperature calibration table not found",
            VclBiasVoltageCaltableNotFound                => "VCL: bias voltage calibration table not found",
            VclIllegalTemperature                         => "VCL: illegal temperature",
            VclIllegalBiasVoltage                         => "VCL: illegal bias voltage",

            SpmIllegalInputValue                          => "SPM: illegal input value",
            SpmValueOutOfBounds                           => "SPM: value out of bounds",
            SpmFwOutOfMemory                              => "SPM FW: out of memory",
            SpmFwUpdateFailed                             => "SPM FW: update failed",
            SpmFwCrcCheckFailed                           => "SPM FW: CRC check failed",
            SpmFwFlashDeletionFailed                      => "SPM FW: flash deletion failed",
            SpmFwFunctionNotImplemented                   => "SPM FW: function not implemented",
            SpmFwFileOpenError                            => "SPM FW: file open error",
            SpmFwFileReadError                            => "SPM FW: file read error",
            SsmScalingTablesNotFound                      => "SSM: scaling tables not found",
            SsmIllegalTriggerMode                         => "SSM: illegal trigger mode",
            SsmIllegalTriggerLevelValue                   => "SSM: illegal trigger level value",
            SsmIllegalCorrectionValue                     => "SSM: illegal correction value",
            SsmTriggerDataNotFound                        => "SSM: trigger data not found",
            SsmCorrectionDataCommandNotFound              => "SSM: correction data command not found",
            SwsScalingTablesNotFound                      => "SWS: scaling tables not found",
            SwsIllegalHwModuletype                        => "SWS: illegal HW moduletype",
            SwsModuleNotFunctional                        => "SWS: module not functional",
            SwsIllegalCenterWavelength                    => "SWS: illegal center wavelength",
            SwsIllegalBandwidth                           => "SWS: illegal bandwidth",
            SwsValueOutOfBounds                           => "SWS: value out of bounds",
            SwsModuleBusy                                 => "SWS: module busy",
            SwsFwWrongComponentAnswering                  => "SWS FW: wrong component answering",
            SwsFwUnknownHwModuletype                      => "SWS FW: unknown HW moduletype",
            SwsFwOutOfMemory                              => "SWS FW: out of memory",
            SwsFwVersionConflict                          => "SWS FW: version conflict",
            SwsFwUpdateFailed                             => "SWS FW: update failed",
            SwsFwCrcCheckFailed                           => "SWS FW: CRC check failed",
            SwsFwErrorOnFlashDeletion                     => "SWS FW: error on flash deletion",
            SwsFwCalibrationModeError                     => "SWS FW: calibration mode error",
            SwsFwFunctionNotImplemented                   => "SWS FW: function not implemented",
            SwsFwWrongCaltableEntry                       => "SWS FW: wrong calibration table entry",
            SwsFwInsufficientCaltableSize                 => "SWS FW: insufficient calibration table size",
            SwsFwFileOpenError                            => "SWS FW: file open error",
            SwsFwFileReadError                            => "SWS FW: file read error",
            SwsHwModule0AllMotorsInitTimeout              => "SWS HW: module 0, all motors: init timeout",
            SwsHwModule0AllMotorsPlausiCheck              => "SWS HW: module 0, all motors: plausi check",
            SwsHwModule0AllMotorsDacSetCurrent            => "SWS HW: module 0, all motors: DAC set current",
            SwsHwModule0AllMotorsTimeout                  => "SWS HW: module 0, all motors: timeout",
            SwsHwModule0AllMotorsFlashWriteError          => "SWS HW: module 0, all motors: flash write error",
            SwsHwModule0AllMotorsOutOfBounds              => "SWS HW: module 0, all motors: out of bounds",
            SwsHwModule0I2cFailure                        => "SWS HW: module 0: I2C failure",
            SwsHwModule0InitFailure                       => "SWS HW: module 0: init failure",
            SwsHwModule0Motor1DataNotFound                => "SWS HW: module 0, motor 1: data not found",
            SwsHwModule0Motor1InitTimeout                 => "SWS HW: module 0, motor 1: init timeout",
            SwsHwModule0Motor1PlausiCheck                 => "SWS HW: module 0, motor 1: plausi check",
            SwsHwModule0Motor1DacSetCurrent               => "SWS HW: module 0, motor 1: DAC set current",
            SwsHwModule0Motor1Timeout                     => "SWS HW: module 0, motor 1: timeout",
            SwsHwModule0Motor1FlashWriteError             => "SWS HW: module 0, motor 1: flash write error",
            SwsHwModule0Motor1OutOfBounds                 => "SWS HW: module 0, motor 1: out of bounds",
            SwsHwModule0Motor2DataNotFound                => "SWS HW: module 0, motor 2: data not found",
            SwsHwModule0Motor2InitTimeout                 => "SWS HW: module 0, motor 2: init timeout",
            SwsHwModule0Motor2PlausiCheck                 => "SWS HW: module 0, motor 2: plausi check",
            SwsHwModule0Motor2DacSetCurrent               => "SWS HW: module 0, motor 2: DAC set current",
            SwsHwModule0Motor2Timeout                     => "SWS HW: module 0, motor 2: timeout",
            SwsHwModule0Motor2FlashWriteError             => "SWS HW: module 0, motor 2: flash write error",
            SwsHwModule0Motor2OutOfBounds                 => "SWS HW: module 0, motor 2: out of bounds",
            SwsHwModule0Motor3DataNotFound                => "SWS HW: module 0, motor 3: data not found",
            SwsHwModule0Motor3InitTimeout                 => "SWS HW: module 0, motor 3: init timeout",
            SwsHwModule0Motor3PlausiCheck                 => "SWS HW: module 0, motor 3: plausi check",
            SwsHwModule0Motor3DacSetCurrent               => "SWS HW: module 0, motor 3: DAC set current",
            SwsHwModule0Motor3Timeout                     => "SWS HW: module 0, motor 3: timeout",
            SwsHwModule0Motor3FlashWriteError             => "SWS HW: module 0, motor 3: flash write error",
            SwsHwModule0Motor3OutOfBounds                 => "SWS HW: module 0, motor 3: out of bounds",
            SwsHwModule1AllMotorsInitTimeout              => "SWS HW: module 1, all motors: init timeout",
            SwsHwModule1AllMotorsPlausiCheck              => "SWS HW: module 1, all motors: plausi check",
            SwsHwModule1AllMotorsDacSetCurrent            => "SWS HW: module 1, all motors: DAC set current",
            SwsHwModule1AllMotorsTimeout                  => "SWS HW: module 1, all motors: timeout",
            SwsHwModule1AllMotorsFlashWriteError          => "SWS HW: module 1, all motors: flash write error",
            SwsHwModule1AllMotorsOutOfBounds              => "SWS HW: module 1, all motors: out of bounds",
            SwsHwModule1I2cFailure                        => "SWS HW: module 1: I2C failure",
            SwsHwModule1InitFailure                       => "SWS HW: module 1: init failure",
            SwsHwModule1Motor1DataNotFound                => "SWS HW: module 1, motor 1: data not found",
            SwsHwModule1Motor1InitTimeout                 => "SWS HW: module 1, motor 1: init timeout",
            SwsHwModule1Motor1PlausiCheck                 => "SWS HW: module 1, motor 1: plausi check",
            SwsHwModule1Motor1DacSetCurrent               => "SWS HW: module 1, motor 1: DAC set current",
            SwsHwModule1Motor1Timeout                     => "SWS HW: module 1, motor 1: timeout",
            SwsHwModule1Motor1FlashWriteError             => "SWS HW: module 1, motor 1: flash write error",
            SwsHwModule1Motor1OutOfBounds                 => "SWS HW: module 1, motor 1: out of bounds",
            SwsHwModule1Motor2DataNotFound                => "SWS HW: module 1, motor 2: data not found",
            SwsHwModule1Motor2InitTimeout                 => "SWS HW: module 1, motor 2: init timeout",
            SwsHwModule1Motor2PlausiCheck                 => "SWS HW: module 1, motor 2: plausi check",
            SwsHwModule1Motor2DacSetCurrent               => "SWS HW: module 1, motor 2: DAC set current",
            SwsHwModule1Motor2Timeout                     => "SWS HW: module 1, motor 2: timeout",
            SwsHwModule1Motor2FlashWriteError             => "SWS HW: module 1, motor 2: flash write error",
            SwsHwModule1Motor2OutOfBounds                 => "SWS HW: module 1, motor 2: out of bounds",
            SwsHwModule1Motor3DataNotFound                => "SWS HW: module 1, motor 3: data not found",
            SwsHwModule1Motor3InitTimeout                 => "SWS HW: module 1, motor 3: init timeout",
            SwsHwModule1Motor3PlausiCheck                 => "SWS HW: module 1, motor 3: plausi check",
            SwsHwModule1Motor3DacSetCurrent               => "SWS HW: module 1, motor 3: DAC set current",
            SwsHwModule1Motor3Timeout                     => "SWS HW: module 1, motor 3: timeout",
            SwsHwModule1Motor3FlashWriteError             => "SWS HW: module 1, motor 3: flash write error",
            SwsHwModule1Motor3OutOfBounds                 => "SWS HW: module 1, motor 3: out of bounds",
            SwsHwModule2AllMotorsInitTimeout              => "SWS HW: module 2, all motors: init timeout",
            SwsHwModule2AllMotorsPlausiCheck              => "SWS HW: module 2, all motors: plausi check",
            SwsHwModule2AllMotorsDacSetCurrent            => "SWS HW: module 2, all motors: DAC set current",
            SwsHwModule2AllMotorsTimeout                  => "SWS HW: module 2, all motors: timeout",
            SwsHwModule2AllMotorsFlashWriteError          => "SWS HW: module 2, all motors: flash write error",
            SwsHwModule2AllMotorsOutOfBounds              => "SWS HW: module 2, all motors: out of bounds",
            SwsHwModule2I2cFailure                        => "SWS HW: module 2: I2C failure",
            SwsHwModule2InitFailure                       => "SWS HW: module 2: init failure",
            SwsHwModule2Motor1DataNotFound                => "SWS HW: module 2, motor 1: data not found",
            SwsHwModule2Motor1InitTimeout                 => "SWS HW: module 2, motor 1: init timeout",
            SwsHwModule2Motor1PlausiCheck                 => "SWS HW: module 2, motor 1: plausi check",
            SwsHwModule2Motor1DacSetCurrent               => "SWS HW: module 2, motor 1: DAC set current",
            SwsHwModule2Motor1Timeout                     => "SWS HW: module 2, motor 1: timeout",
            SwsHwModule2Motor1FlashWriteError             => "SWS HW: module 2, motor 1: flash write error",
            SwsHwModule2Motor1OutOfBounds                 => "SWS HW: module 2, motor 1: out of bounds",
            SwsHwModule2Motor2DataNotFound                => "SWS HW: module 2, motor 2: data not found",
            SwsHwModule2Motor2InitTimeout                 => "SWS HW: module 2, motor 2: init timeout",
            SwsHwModule2Motor2PlausiCheck                 => "SWS HW: module 2, motor 2: plausi check",
            SwsHwModule2Motor2DacSetCurrent               => "SWS HW: module 2, motor 2: DAC set current",
            SwsHwModule2Motor2Timeout                     => "SWS HW: module 2, motor 2: timeout",
            SwsHwModule2Motor2FlashWriteError             => "SWS HW: module 2, motor 2: flash write error",
            SwsHwModule2Motor2OutOfBounds                 => "SWS HW: module 2, motor 2: out of bounds",
            SwsHwModule2Motor3DataNotFound                => "SWS HW: module 2, motor 3: data not found",
            SwsHwModule2Motor3InitTimeout                 => "SWS HW: module 2, motor 3: init timeout",
            SwsHwModule2Motor3PlausiCheck                 => "SWS HW: module 2, motor 3: plausi check",
            SwsHwModule2Motor3DacSetCurrent               => "SWS HW: module 2, motor 3: DAC set current",
            SwsHwModule2Motor3Timeout                     => "SWS HW: module 2, motor 3: timeout",
            SwsHwModule2Motor3FlashWriteError             => "SWS HW: module 2, motor 3: flash write error",
            SwsHwModule2Motor3OutOfBounds                 => "SWS HW: module 2, motor 3: out of bounds",

            LibTooManyUsbHandles                          => "LIB: too many USB handles",
            LibIllegalDeviceIndex                         => "LIB: illegal device index",
            LibUsbDeviceOpenError                         => "LIB: USB device open error",
            LibUsbDeviceBusyOrBlocked                     => "LIB: USB device busy or blocked",
            LibUsbDeviceAlreadyOpened                     => "LIB: USB device already opened",
            LibUnknownUsbHandle                           => "LIB: unknown USB handle",
            LibScm828ModuleNotFound                       => "LIB: SCM 828 module not found",
            LibIllegalSlotNumber                          => "LIB: illegal slot number",
            LibReferencedSlotIsNotInUse                   => "LIB: referenced slot is not in use",
            LibThisIsNoScm828Module                       => "LIB: this is no SCM 828 module",
            LibThisIsNoSom828Module                       => "LIB: this is no SOM 828 module",
            LibThisIsNoSlm828Module                       => "LIB: this is no SLM 828 module",
            LibThisIsNoSml828Module                       => "LIB: this is no SML 828 module",
            LibThisIsNoSwm828Module                       => "LIB: this is no SWM 828 module",
            LibThisIsNoSsmModule                          => "LIB: this is no SSM module",
            LibThisIsNoSwsModule                          => "LIB: this is no SWS module",
            LibThisIsNoSpmModule                          => "LIB: this is no SPM module",
            LibThisIsNoLmp1                               => "LIB: this is no LMP1 (metermodule w. shuttercontrol)",
            LibThisIsNoSom828DModule                      => "LIB: this is no SOM 828 D module",
            LibNoMapFound                                 => "LIB: no map found",
            LibThisIsNoLmp8                               => "LIB: this is no LMP8 (eightfold metermodule)",
            LibThisIsNoVcl828Module                       => "LIB: this is no VCL 828 module",
            LibThisIsNoVuvNorVirModule                    => "LIB: this is no VUV nor VIR module",
            LibThisIsNoPriModule                          => "LIB: this is no PRI module",
            LibDeviceChangedReInitialiseUsbDeviceList     => "LIB: device changed, re-initialise USB device list",
            LibInappropriateUsbDevice                     => "LIB: inappropriate USB device",
            LibWrongUsbDriverVersion                      => "LIB: wrong USB driver version",
            LibUnknownFunction                            => "LIB: unknown function",
            LibIllegalParameterOnFunctionCall             => "LIB: illegal parameter on function call",
            LibUnknownErrorCode                           => "LIB: unknown error code",
        };
        write!(f, "{}", description)
    }
}


#[cfg(test)]
mod test {
    use super::*;
    use test_log;

    #[test]
    fn test_error_conversion() {
        assert_eq!(Sepia2Error::LibUnknownUsbHandle.as_raw(),                 SEPIA2_ERR_LIB_UNKNOWN_USB_HANDLE                  );
        assert_eq!(Sepia2Error::LibTooManyUsbHandles.as_raw(),                SEPIA2_ERR_LIB_TOO_MANY_USB_HANDLES                );
        assert_eq!(Sepia2Error::I2cDeviceError.as_raw(),                      SEPIA2_ERR_I2C_DEVICE_ERROR                        );
        assert_eq!(Sepia2Error::Lmp1AdcTablesNotFound.as_raw(),               SEPIA2_ERR_LMP1_ADC_TABLES_NOT_FOUND               );
        assert_eq!(Sepia2Error::Lmp1AdcOverflow.as_raw(),                     SEPIA2_ERR_LMP1_ADC_OVERFLOW                       );
        assert_eq!(Sepia2Error::Lmp1AdcUnderflow.as_raw(),                    SEPIA2_ERR_LMP1_ADC_UNDERFLOW                      );
        assert_eq!(Sepia2Error::ScmVoltageLimitsTableNotFound.as_raw(),       SEPIA2_ERR_SCM_VOLTAGE_LIMITS_TABLE_NOT_FOUND      );
        assert_eq!(Sepia2Error::ScmVoltageScalingListNotFound.as_raw(),       SEPIA2_ERR_SCM_VOLTAGE_SCALING_LIST_NOT_FOUND      );
        assert_eq!(Sepia2Error::ScmRepeatedlyMeasuredVoltageFailure.as_raw(), SEPIA2_ERR_SCM_REPEATEDLY_MEASURED_VOLTAGE_FAILURE );
        assert_eq!(Sepia2Error::ScmPowerSupplyLine0VoltageTooLow.as_raw(),    SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_LOW  );
        assert_eq!(Sepia2Error::ScmPowerSupplyLine1VoltageTooLow.as_raw(),    SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_LOW  );
    }

    #[test]
    fn test_into_error_type() {
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_LIB_UNKNOWN_USB_HANDLE),                  Err(Sepia2Error::LibUnknownUsbHandle                ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_LIB_TOO_MANY_USB_HANDLES),                Err(Sepia2Error::LibTooManyUsbHandles               ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_I2C_DEVICE_ERROR),                        Err(Sepia2Error::I2cDeviceError                     ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_LMP1_ADC_TABLES_NOT_FOUND),               Err(Sepia2Error::Lmp1AdcTablesNotFound              ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_LMP1_ADC_OVERFLOW),                       Err(Sepia2Error::Lmp1AdcOverflow                    ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_LMP1_ADC_UNDERFLOW),                      Err(Sepia2Error::Lmp1AdcUnderflow                   ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_SCM_VOLTAGE_LIMITS_TABLE_NOT_FOUND),      Err(Sepia2Error::ScmVoltageLimitsTableNotFound      ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_SCM_VOLTAGE_SCALING_LIST_NOT_FOUND),      Err(Sepia2Error::ScmVoltageScalingListNotFound      ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_SCM_REPEATEDLY_MEASURED_VOLTAGE_FAILURE), Err(Sepia2Error::ScmRepeatedlyMeasuredVoltageFailure));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_0_VOLTAGE_TOO_LOW), Err(Sepia2Error::ScmPowerSupplyLine0VoltageTooLow   ));
        assert_eq!(Sepia2Error::from_raw(SEPIA2_ERR_SCM_POWER_SUPPLY_LINE_1_VOLTAGE_TOO_LOW), Err(Sepia2Error::ScmPowerSupplyLine1VoltageTooLow   ));

        assert_eq!(Sepia2Error::from_raw(0), Ok(()));
    }
}
